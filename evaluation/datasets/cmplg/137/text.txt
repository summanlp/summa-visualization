
 The efficiency of LR(k) parsing techniques   is very attractive from the perspective of natural language 
processing applications.  
This has stimulated the computational linguistics community to 
develop extensions of these techniques to general context-free 
grammar parsing. 
The best-known example is 
generalized LR parsing, also known as
Tomita's algorithm, described by 
and further investigated by, for example,
 and . 
Despite appearances, the graph-structured stacks used to describe 
Tomita's algorithm differ very little from parse tables, 
or in other words,
generalized LR parsing is one of the
so called
tabular parsing algorithms, among which also the 
 CYK algorithm   and Earley's algorithm  can be found. (Tabular parsing is also known as chart parsing.)

In this paper we investigate the extension of LR parsing to general 
context-free grammars from a more general viewpoint: tabular
algorithms can often be described by the composition
of two constructions. One example is given by 
and ;
the construction of pushdown automata from grammars and the
simulation of these automata by means of tabulation yield different
tabular algorithms for different such constructions.
Another example, on which our presentation is based, was first
suggested by : a grammar is first transformed
and then a standard tabular algorithm 
along with some filtering condition 
is applied
using the transformed grammar. In our case, the transformation
and the subsequent application of the tabular algorithm result in a new form
of tabular LR parsing.

Our method is more efficient than Tomita's algorithm in two respects.
First, reduce operations are implemented in an efficient way,
by splitting them into several, more primitive, operations
(a similar idea has been proposed by  for Tomita's algorithm). 
Second, several paths in the computation that must be 
simulated separately by Tomita's algorithm are collapsed into a single 
computation path, using state minimization techniques. 
Experiments on practical grammars have indicated that there is a 
significant gain in efficiency, with regard to both space and time requirements.

Our grammar transformation produces a so called cover for 
the input 
grammar, which together with the filtering condition 
fully captures the specification of the method, 
abstracting away from algorithmic details such as data structures 
and control flow. 
Since this cover can be easily precomputed,  
implementing our LR parser simply amounts to
running the standard tabular algorithm.
This is very attractive from an application-oriented perspective,
since many actual systems for natural language processing are 
based on these kinds of parsing algorithm.

The remainder of this paper is organized as follows.
 In Section  some preliminaries are discussed.  We review the notion of LR automaton in Section   and introduce the notion of 2LR automaton in Section .  Then we specify our tabular LR method in Section ,  and provide an analysis of the algorithm in Section .  Finally, some empirical results are given in Section ,  and further discussion of our method is provided in Section .   

Throughout this paper we use standard formal language notation.
We assume that the reader is familiar with context-free
 grammar parsing theory .   

A context-free grammar ()
is a 4-tuple 

,
where 
and are two finite disjoint sets of terminal 
and nonterminal symbols, respectively, 


is the start symbol, 
and P is a finite set of rules. Each rule has the form


with 


and 

,
where 
denotes 

.
The size of G, written ,
is defined
as 

;
by  we
mean the length of a string of symbols .

We generally use symbols 


to range over 

,
symbols 


to range over ,
symbols X, Y, Z to range over ,
symbols 


to range over 

,
and symbols 


to range over 

.
We write 
to denote the empty string.

A 
is said to be in binary form if 

for all of its rules

.
(The binary form does not limit
the (weak) generative capacity of context-free 
 grammars .) For technical reasons, we sometimes use the augmented grammar 
associated with G, defined as 

,
where ,

and 
are fresh symbols, 

,


and 

.

A pushdown automaton ()
is a 5-tuple

,
where ,

and T are finite sets of input symbols, stack symbols
and transitions, respectively;


is the initial stack symbol and


is the final stack symbol.
  Each transition has the form 

,
where 

,

,

,
and 
or z=a.
We generally use symbols 


to range over ,
and
the symbol 
to range over .

Consider a fixed input string 

.
A configuration of the automaton is a pair 


consisting
of a stack 


and the remaining input w,
which is a suffix of the input string v.
The rightmost symbol of 
represents the top of the stack.
The initial configuration has the form

,
where the stack is formed by the initial
stack symbol.  
The final configuration has the form

,
where the stack is formed by the final
stack symbol stacked upon the initial stack symbol. 

The application of a transition 

is described as follows.
If the top-most symbols of the stack are ,
then these 
symbols may be replaced by ,
provided that either ,
or z=a and a is
the first symbol of the remaining input. Furthermore, if z=a then a is
removed from the remaining input. 
Formally, for a fixed 

we define the binary relation 

on configurations as the least relation satisfying


if there is a transition

,
and


if there is a transition

.
The recognition of a certain input v is obtained if starting from the
initial configuration for that input we can reach the final
configuration by repeated application of transitions, or,
formally, if 

,
where 
denotes the reflexive and transitive closure of
.

By a computation of a PDA we mean a sequence





... 

,
.
A 
is called deterministic 
if for all possible configurations at most one transition is applicable. 
A 
is said to be in binary form
if, for all transitions 

,
we have 

.

Let 


be a .
We recall the notion of LR automaton, which is
a particular kind of .
We make use of the augmented grammar 


 introduced in Section . 

Let 

.
We introduce the function 
from 


to 


and the function 
from 


to 

.
For any 

,


is the smallest set such that
1.

;
and
2.


and 


together imply 

.
We then define 

  

We construct a finite set 
as the smallest collection of sets 
satisfying the conditions:
1.

;
and
2.
for every 


and 

,
we have

,
provided 

.
Two elements from 
deserve special attention:

,
and ,
which is defined to be
the unique set in 
containing 

;
in other words, 

.

For 

,
an A-redex is a string 

,
,
of elements from ,
satisfying the following conditions: 
1.

,
for some 

;
and
2.

,
        for 

.
Note that in such an A-redex, 




,
and 


qk, for .

The LR automaton associated with G is now introduced.
  Transitions in (i) above are called shift, 
transitions in (ii) are called reduce. 

The automata 
defined in the previous section
are deterministic only for a subset of the s, 
 called the LR(0) grammars , and behave nondeterministically in the general case.
When designing tabular methods that 
simulate nondeterministic computations of ,
two main difficulties are encountered: 

A reduce transition in 
is an elementary operation 
that removes from the stack a number of elements bounded by 
the size of the underlying grammar.  Consequently, 
the time requirement of tabular
simulation of 
computations can be onerous, for 
reasons pointed out by  and .

The set 
can be exponential in the size 
 of the grammar .   If in such a case the computations of 
touch upon each state, 
then time and space requirements of tabular simulation are 
obviously onerous. 


The first issue above is solved here by recasting 
in binary form. This is done by considering each reduce transition 
as a sequence of ``pop'' operations which affect at most two stack symbols 
at a time. (See also , , and ,
and for LR parsing specifically  and .)
The following definition introduces this new kind of automaton.



Transitions in (i) above are again called shift, transitions
in (ii) are called initiate, those in (iii) are called 
gathering, and transitions in (iv) are called goto.
The role of a reduce step in 
is taken over in by an initiate step, a number of gathering steps, and a goto step.
Observe that these steps involve the new stack symbols


that are distinguishable from possible stack symbols

.

We now turn to the second above-mentioned problem, 
regarding the size of set .
The problem is in part solved here as follows. 
The number of states in 
is considerably reduced by identifying two states if they become identical
after items 


from 
have been
simplified to only the suffix of the right-hand side .
This is reminiscent of
 techniques of state minimization for finite automata ,  as they have been applied before to LR parsing, e.g., 
by  and .

Let 
be the augmented grammar associated with 
a 
G, and let 

.
We define variants of the 
and 
functions from the
previous section as follows.
For any set 

,


is the smallest collection of sets such that
1.

;
and
2.


and


together imply 

.
Also, we define 

  

We now construct a finite set 


as the smallest set 
satisfying the conditions:
1.

;
and 
2.
for every


and 

,
we have

,
provided 

.

As stack symbols, we take the elements from 
and a subset
of elements from 

:



In a stack symbol of the form (X, q),
the X serves to record the grammar symbol
that has been recognized last, cf. the symbols that formerly were found
immediately before the dots. 

The 2LR automaton associated with G can now be introduced. 
  Note that in the case of a reduce/reduce conflict with two grammar
rules sharing some suffix in the right-hand side, the gathering steps
of 
will treat both rules simultaneously,
until the parts of the right-hand sides are reached where the two rules differ.
(See  for a similar sharing of computation for
common suffixes.)

An interesting fact is that the automaton 
is very similar
to the automaton 
constructed for a grammar transformed
by the transformation 


given by .

This section presents a tabular LR parser, 
which is the main result of this paper. 
The parser is derived from the 2LR automata 
introduced in the previous section.  Following the general approach 
presented by , we simulate computations of these devices 
using a tabular method, a grammar transformation and a filtering
function.

We make use of a tabular parsing algorithm which is basically 
an asynchronous version of the CYK algorithm, 
as presented by , 
extended to productions of the forms 
and 


and 
with a left-to-right filtering condition. 
The algorithm uses a parse table consisting in a 0-indexed 
square array U. The indices represent positions in the input string.
We define Ui to be 

.

Computation of the entries of U is moderated by a filtering process.
This process makes use of a function 
from


to 

,
specific to a certain
context-free grammar.
We have a certain nonterminal 


which is initially
inserted in U0,0 in order to start the recognition process.

We are now ready to give a formal specification of the tabular algorithm.

  The string has been accepted when 

.

We now specify a grammar transformation, based on the 
definition of .

  Observe that there is a direct, one-to-one correspondence between 
transitions of 
and productions of .

The accompanying function 
is defined as follows
(q,q',q'' range over the stack elements):



The above definition implies that only the tabular equivalents of the
shift, initiate and goto transitions are subject to actual filtering; 
the simulation
of the gathering transitions does not depend on elements in .

Finally, the distinguished nonterminal from the cover used to initialize 
the table is .
Thus we start with 

.

The 2LR cover introduces spurious ambiguity: where some grammar
G would allow a certain number of parses to be found for a certain
input, the grammar 
in general allows more parses.
This problem is in part solved by the filtering function .
The remaining spurious ambiguity is avoided by a particular
way of constructing the parse trees, described in what follows.

 After Algorithm  has recognized a given input, the set of all parse trees can be computed as 


where the function ,
which 
determines sets of either parse trees or lists of parse trees
for entries in U, is recursively defined by:
1.


is the set .
This set contains a single
parse tree consisting of a single node labelled a.
2.


is the set 

.
This set consists of
an empty list of trees.
3.


is the union of the sets 

,
where 

,

,
and there is at least one


and


in ,
for some q.
For each such k, select one such q. We define

.
Each 


is a list of
trees, with head t and tail .
4.


is the union of the sets 

,
where 


is such that 


in .
We define 

.
The function 
constructs a tree from a fresh root node labelled
A and the trees in list 
as immediate subtrees.
We emphasize that in the third clause above, 
one should not consider more than one 
q for given k in order to prevent spurious ambiguity.
(In fact, for fixed X,i,k and for different q 
such that 

,


yields 
the exact same set of trees.)
With this proviso, the degree of ambiguity, i.e. the number of parses
found by the algorithm for any input, is reduced to exactly that of 
the source grammar.

A practical implementation would construct the parse trees on-the-fly,
attaching them to the table entries, allowing packing and sharing
of subtrees (cf. the literature on parse forests 
 ,).  Our algorithm 
actually only needs one (packed) subtree for several 


with 
fixed X,i,k but different q.
The resulting parse forests would then be optimally
compact, contrary to some other LR-based tabular algorithms, as pointed
out by ,  and . 

In this section, we investigate how the steps performed 
 by Algorithm  (applied to the 2LR cover) relate to those performed by ,
for the same input.

We define a subrelation 
of 
as:


if and only if

,
for some ,
where 


for all k, 

.
Informally, we have 


if configuration


can be reached from 


without the
bottom-most part 
of the intermediate stacks being affected by
any of the transitions;
furthermore, at least one element is pushed on top of .

The following characterization relates  
the automaton 
 and Algorithm  applied to the 2LR cover.
Symbol 


is eventually 
added to Ui,j if and only if for some :



In words, q is found in entry Ui,j if and only if, 
at input position j, the automaton would push some 
element q on top of some lower-part of the stack 
that 
remains unaffected while the input from i to j is being read.

The above characterization, whose proof is not reported here,
is the justification for calling the resulting algorithm 
tabular LR parsing. In particular, for
a grammar for which 
is deterministic, i.e. for an
LR(0) grammar, the number of steps performed by 
and
the number of steps performed by the above algorithm 
are exactly the same. In the case
of grammars which are not LR(0), the tabular LR algorithm
is more efficient than for example a backtrack realisation of .

For determining the order of the time complexity of
our algorithm, we look at the most
expensive step, which
is the computation of an element 


from 
two elements 


and 

,
through

.
In a straightforward realisation of the algorithm,
this step can be applied 


times (once for each i,k,j and each transition), each step taking
a constant amount of time.
We conclude that the time complexity of our algorithm
is 

.

As far as space requirements are concerned, each set Ui,jor Ui contains at most 


elements.
(One may assume an auxiliary table storing each Ui.)
This results in a space complexity 

.

The entries in the table represent single stack elements, as opposed to
pairs of stack elements following  and . 
This has been investigated before 
by  and .

 We have performed some experiments with Algorithm  applied to 
and ,
for 4 practical context-free grammars.
For 
a cover was used analogous to 
the one in 
 Definition ; the filtering function remains the same.

The first grammar 
generates a subset of the programming language ALGOL 68
 . The second and third  grammars generate a fragment of Dutch, and are 
referred to 
 as the CORRie grammar  and the Deltra  grammar ,  respectively. 
These grammars were stripped of their arguments
in order to 
convert them into context-free grammars.  
The fourth grammar, referred to as the
 Alvey grammar ,  generates a fragment of English and was
automatically generated from a unification-based grammar.

The test sentences
have been obtained by automatic generation from the grammars,
 using the Grammar Workbench , which uses a random generator to select rules; 
therefore these sentences do 
not necessarily represent input typical 
of the applications 
for which the grammars were written. 
 Table  summarizes the test material.  

Our implementation is merely a prototype, which means that
absolute duration of the parsing process is little indicative of
the actual efficiency of more sophisticated implementations.
Therefore, our measurements have been restricted to implementation-independent
quantities, viz. the number of elements stored
in the parse table and the number of elementary steps
performed by the algorithm. In a
practical implementation, such quantities will strongly influence the 
space and time complexity, although they do not represent the only
determining factors. Furthermore, all optimizations
of the time and space efficiency have been left out of consideration.

 Table  presents the costs of parsing the  test sentences.
The first and third columns 
give the number of entries stored in table
U, the second 
and fourth 
columns give the number of elementary steps that were
performed. 

An elementary step consists of the derivation of one element
in 
or 
from one or two 
other elements. 
The elements that are used in the filtering process are counted
individually. 
We give an example for the case of .
Suppose we derive an element 


from
an element 

,
warranted by
two elements 

,

,
through ,
in the presence of


and

.
We then count 
two parsing steps, one for q1 and one for q2.

 Table  shows that there is a significant gain in space and time efficiency 
when moving 
from 
to .

Apart from the dynamic costs of parsing, we have also measured some
quantities relevant to the construction and storage of the two types
of tabular LR parser. 
 These data are given in Table . 

We see that the number of states is strongly reduced
with regard to traditional LR parsing. In the case of the Alvey
grammar, 
moving from 


to 


amounts
to a reduction to 20.3 %. 
Whereas time- and space-efficient computation 
of 
for this grammar is a serious problem,
computation of 


will not be difficult on any modern
computer. Also significant is the reduction from 
to
,
especially for the larger grammars. These quantities 
correlate with the amount of storage needed for naive representation
of the respective automata.

Our treatment of tabular LR parsing has two important advantages over
the one by Tomita: 

It is conceptually simpler, because we make use of simple
concepts such as a grammar transformation and the well-understood
CYK algorithm, instead of a complicated mechanism working on 
graph-structured stacks.

Our algorithm requires fewer LR states.
This leads to faster parser generation, to smaller parsers, 
and to reduced time and space complexity of parsing itself.



The conceptual simplicity of our formulation of tabular
LR parsing allows comparison with other tabular parsing techniques,
such as
 Earley's algorithm  and tabular left-corner  parsing , based on implementation-independent criteria. This is in contrast to experiments reported before (e.g. by
),
which treated tabular LR parsing differently from the other
techniques.

The reduced time and space complexities reported in the previous
section pertain to the tabular realisation of two
parsing techniques, expressed by the automata 
and 
.
The tabular realisation of the former automata is
very close to a variant of Tomita's algorithm 
by . 
The objective of our experiments was to show that the
automata 
provide a better basis than 
for 
tabular LR parsing with regard to space and time complexity. 

Parsing algorithms that are not based on the LR technique
have however been left out of consideration, and so
were techniques for unification grammars and techniques incorporating
finite-state processes.

Theoretical 
 considerations ,, have suggested that for natural language parsing, LR-based techniques may not
necessarily be superior to other parsing techniques, although
convincing empirical data to this effect has never been shown.
This issue is difficult to resolve because so much of the 
relative efficiency of the different parsing techniques depends
on particular grammars and particular input, as well as
on particular implementations of the techniques. We hope
the conceptual framework presented in this paper may
at least partly alleviate this problem.

The first author is supported by the Dutch Organization
for Scientific Research (NWO), under grant 305-00-802.
Part of the present research was done
while the second author was visiting the
Center for Language and Speech Processing,
Johns Hopkins University, Baltimore, MD.

We received kind help from 
John Carroll, Job Honig, Kees Koster, Theo Vosse and Hans de Vreught
in finding the grammars mentioned in this paper.
Generous help with locating relevant literature was provided by Anton
Nijholt, Rockford Ross, and Arnd Rumann.

Billot, S. and B. Lang.
1989.
The structure of shared forests in ambiguous parsing.
In 27th Annual Meeting of the ACL, pages 143-151.

Booth, T.L.
1967.
Sequential Machines and Automata Theory.
Wiley, New York.

Carroll, J.A.
1993.
Practical unification-based parsing of natural language.
Technical Report No. 314, University of Cambridge, Computer
  Laboratory, England.
PhD thesis.

Earley, J.
1970.
An efficient context-free parsing algorithm.
Communications of the ACM, 13(2):94-102.

Harrison, M.A.
1978.
Introduction to Formal Language Theory.
Addison-Wesley.

Johnson, M.
1991.
The computational complexity of GLR parsing.
In , chapter 3, pages 35-42.

Kipps, J.R.
1991.
GLR parsing in time 

.
In , chapter 4, pages 43-59.

Lang, B.
1974.
Deterministic techniques for efficient non-deterministic parsers.
In Automata, Languages and Programming, 2nd Colloquium,
  LNCS 14, pages 255-269,
  Saarbrcken. Springer-Verlag.

Leermakers, R.
1989.
How to cover a grammar.
In 27th Annual Meeting of the ACL, pages 135-142.

Leermakers, R.
1992a.
A recursive ascent Earley parser.
Information Processing Letters, 41(2):87-91.

Leermakers, R.
1992b.
Recursive ascent parsing: from Earley to Marcus.
Theoretical Computer Science, 104:299-312.

Nederhof, M.J.
1993.
Generalized left-corner parsing.
In Sixth Conference of the European Chapter of the ACL, pages
  305-314.

Nederhof, M.J.
1994a.
Linguistic Parsing and Program Transformations.
Ph.D. thesis, University of Nijmegen.

Nederhof, M.J.
1994b.
An optimal tabular parsing algorithm.
In 32nd Annual Meeting of the ACL, pages 117-124.

Nederhof, M.J. and K. Koster.
1992.
A customized grammar workbench.
In J. Aarts, P. de Haan, and N. Oostdijk, editors, English
  Language Corpora: Design, Analysis and Exploitation, Papers from the
  thirteenth International Conference on English Language Research on
  Computerized Corpora, pages 163-179, Nijmegen. Rodopi.

Nederhof, M.J. and J.J. Sarbo.
1993.
Increasing the applicability of LR parsing.
In Third International Workshop on Parsing Technologies, pages
  187-201.

Nederhof, M.J. and G. Satta.
1994.
An extended theory of head-driven parsing.
In 32nd Annual Meeting of the ACL, pages 210-217.

Pager, D.
1970.
A solution to an open problem by Knuth.
Information and Control, 17:462-473.

Rekers, J.
1992.
Parser Generation for Interactive Environments.
Ph.D. thesis, University of Amsterdam.

Schabes, Y.
1991.
Polynomial time and space shift-reduce parsing of arbitrary
  context-free grammars.
In 29th Annual Meeting of the ACL, pages 106-113.

Schauerte, R.
1973.
Transformationen von LR(k)-grammatiken.
Diplomarbeit, Universitt Gttingen, Abteilung Informatik.

Schoorl, J.J. and S. Belder.
1990.
Computational linguistics at Delft: A status report.
Report WTM/TT 90-09, Delft University of Technology, Applied
  Linguistics Unit.

Shann, P.
1991.
Experiments with GLR and chart parsing.
In TO91a, chapter 2, pages 17-34.

Sheil, B.A.
1976.
Observations on context-free parsing.
Statistical Methods in Linguistics, pages 71-109.

Sippu, S. and E. Soisalon-Soininen.
1990.
Parsing Theory, Vol. II: LR(k) and LL(k) Parsing.
Springer-Verlag.

Tomita, M.
1986.
Efficient Parsing for Natural Language.
Kluwer Academic Publishers.

Tomita, M., editor.
1991.
Generalized LR Parsing.
Kluwer Academic Publishers.

van Wijngaarden, A. et al.
1975.
Revised report on the algorithmic language ALGOL 68.
Acta Informatica, 5:1-236.

Villemonte de la Clergerie, E.
1993.
Automates  Piles et Programmation Dynamique -- DyALog:
  Une application  la Programmation en Logique.
Ph.D. thesis, Universit Paris VII.

Vosse, T.G.
1994.
The Word Connection.
Ph.D. thesis, University of Leiden.

We dispense with the notion of state, 
traditionally incorporated in the definition of .
This does not affect the power of these devices, since
states can be encoded within stack symbols and transitions.
  For the earliest mention of this transformation, we have
encountered pointers to . Regrettably, we have as yet not been
able to get hold of a copy of this paper.
  As remarked before by , the algorithms by
 and  are not really related to LR parsing, although
some notation used in these papers suggests otherwise.
