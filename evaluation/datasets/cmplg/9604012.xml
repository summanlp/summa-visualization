<?xml version='1.0'?>
<!DOCTYPE MINIMAL-DOC SYSTEM "mini.dtd">
<MINIMAL-DOC>
<TITLE>SEMHE: A Generalised Two-Level System</TITLE>
<ABSTRACT>
<P>
This paper presents a generalised two-level implementation
which can handle linear and non-linear morphological operations. An
algorithm for the interpretation of multi-tape two-level rules is
described. In addition, a number of issues which arise when developing
non-linear grammars are discussed with examples from Syriac.
</P>
</ABSTRACT>
<BODY>
<DIV ID="1" DEPTH="1" R-NO="1"><HEADER>  Introduction </HEADER>
<P>
 The introduction of two-level morphology <REF/> and subsequent developments has made implementing computational-morphology
models a feasible task. Yet, two-level formalisms fell short from
providing elegant means for the description of non-linear operations
such as infixation, circumfixation and root-and-pattern
 morphology. As a result, two-level implementations -
 e.g. <REF/>,<REF/>,<REF/>,<REF/> - have always been biased towards linear morphology.
</P>
<P>
The past decade has seen a number of proposals for handling non-linear
 morphology; however, none (apart from Beesley's work) seem to have been implemented over large
descriptions, nor have they provided means by which the grammarian can
develop non-linear descriptions using higher level notation.
</P>
<P>
To test the validity of one's proposal or formalism, minimally a
 medium-scale description is a desideratum. SemHe fulfils this requirement. It is a generalised multi-tape two-level system which is being used in
developing non-linear grammars.
</P>
<P>
This paper (1) presents the algorithms behind SemHe; (2)
discusses the issues involved in compiling non-linear
descriptions; and (3) proposes extension/solutions to make writing
non-linear rules easier and more elegant.  The paper assumes knowledge
 of multi-tape two-level morphology <REF/>,<REF/>. 
</P>
</DIV>
<DIV ID="2" DEPTH="1" R-NO="2"><HEADER>  Linguistic Descriptions </HEADER>
<P>
     <!-- MATH: $\fbox{\begin{minipage}{\linewidth}   \begin{tabbing}
{}\=    tl\_alphabet({\tt 1}, {\tt [c$_1$ ,c$_2$ ,c$_3$ ,v,$\flat$ ]}). \
         tl\_alphabet({\tt 2}, {\tt [k,t,b,$\flat$ ]}).\
         tl\_alphabet({\tt 3}, {\tt [a,e,$\flat$ ]}). \=\% lexical alphabets
      \kill
      \> tl\_alphabet({\tt 0}, {\tt [k,t,b,a,e]}).\> \% surface alphabet\\
         tl\_alphabet({\tt 1}, {\tt [c$_1$ ,c$_2$ ,c$_3$ ,v,$\flat$ ]}). \ 
         tl\_alphabet({\tt 2}, {\tt [k,t,b,$\flat$ ]}).\
         tl\_alphabet({\tt 3}, {\tt [a,e,$\flat$ ]}). \% lexical alphabets\\
      \> tl\_set({\tt radical, [k,t,b]}).
         tl\_set({\tt vowel, [a,e]}).\ 
         tl\_set({\tt c1c3, [c$_1$ ,c$_3$ ]}).\> \% variable sets \\
      \> \tlruleintablong{R1}{[[],[],[]]}{[[$\flat$ ],[$\flat$ ],[$\flat$ ]]}{[[],[],[]]}{=>}
                      {[]}{[]}{[]}
                      {[]|[[],[],[]]} \\
      \> \tlruleintablong{R2}{[[],[],[]]}{[[P],[C],[]]}{[[],[],[]]}{=>}
                      {[]}{[C]}{[]}
                      {[c1c3(P),radical(C)]|[[],[],[]]}\\
      \> \tlruleintablong{R3}{[[],[],[]]}{[[v],[],[V]]}{[[],[],[]]}{=>}
                      {[]}{[V]}{[]}
                      {[vowel(V)]|[[],[],[]]}\\
      \> \tlruleintablong{R4}{[[],[],[]]}{[[v],[],[V]]}{[[c$_2$ ,v],[],[]]}{<=>}
                      {[]}{[]}{[]}
                      {[vowel(V)]|[[],[],[]]}\\
      \> \tlruleintablong{R5}{[[],[],[]]}{[[c$_2$ ],[C],[]]}{[[],[],[]]}{<=>}
                      {[]}{[C]}{[]}
                      {[radical(C)]|[[], [root:[measure=p`al]], []]}\\
      \> \tlruleintablong{R6}{[[],[],[]]}{[[c$_2$ ],[C],[]]}{[[],[],[]]}{<=>}
                      {[]}{[C,C]}{[]}
                      {[radical(C)]|[[], [root:[measure=pa``el]], []]}
   \end{tabbing}
   \end{minipage}}$ -->
<EQN/>
   Listing 1
</P>
<P>
The linguist provides SemHe with three pieces of data: a
lexicon, two-level rules and word formation grammar. All entries take
 the form of Prolog terms.  (Identifiers starting with an uppercase letter denote variables, otherwise they are instantiated symbols.)  A lexical
entry is described by the term
</P>
<P>
<EQN/>
</P>
<P>
Categories are of the form
<EQN/>#4		 <EQN/>		 <EQN/>
 a notational variant of the PATR-II category formalism <REF/>. 
</P>
<P>
A two-level rule is described using a syntactic variant of the
 formalism described by <REF/>,<REF/>, including the  extensions by <REF/>, 
</P>
<P>
<EQN/>#8		 <EQN/>		 <EQN/>
The arguments are: (1) a rule identifier, id; (2) the
left-lexical-context, LLC, the lexical center, Lex, and
the right-lexical-context, RLC, each in the form of a
list-of-lists, where the ith list represents the ith
lexical tape; (3) an operator, =] for optional rules or [=] for obligatory rules; (4) the left-surface-context, LSC,
the surface center, Surf, and the right-surface-context, RSC, each in the form of a list; (5) a list of the variables
used in the lexical and surface expressions, each member in the form
of a predicate indicating the set identifier (see infra) and an
argument indicating the variable in question; and (6) a set of features (i.e. category forms) in the form of a list-of-lists, where
the ith item must unify with the feature-structure of the
morpheme affected by the rule on the ith lexical tape.  
</P>
<P>
A lexical string maps to a surface string iff (1) they can be
partitioned into pairs of lexical-surface subsequences, where each
pair is licenced by a rule, and (2) no partition violates an
obligatory rule.
</P>
<P>
Alphabet declarations take the form
tl_alphabet(
tape, symbol_list), and variable sets are described by the
predicate tl_set(id, 
symbol_list). Word formation rules take the form of
unification-based CFG rules,
</P>
<P>
<!-- MATH: ${\tt synrule}(\langle identifier\rangle,\break
\langle mother\rangle,
                [\langle daughter_1\rangle,\ldots,
\langle daughter_n\rangle]).$ -->
<EQN/>
</P>
<P>
The following example illustrates the derivation of Syriac
 /ktab/ `he wrote' (in the  simple p`al measure) from the pattern morpheme {cvcvc} `verbal pattern', root {ktb} `notion of writing', and vocalism {a}. The three
morphemes produce the underlying form */katab/, which surfaces as
/ktab/ since short vowels in open unstressed syllables are
 deleted. The process is illustrated in +1. 
</P>
<P>
<EQN/>
</P>
<P>
The pa``el measure of the same verb, viz. /katteb/, is derived by
the gemination of the middle consonant (i.e. t) and applying the 
appropriate vocalism {ae}.
</P>
<P>
The two-level grammar (Listing 1) assumes three lexical
tapes. Uninstantiated contexts are denoted by an empty list.  R1 is
the morpheme boundary (= <EQN/>)
rule. R2 and R3 sanction stem
consonants and vowels, respectively. R4 is the obligatory vowel
deletion rule. R5 and R6 map the second radical, [t], for p`al
and pa``el forms, respectively. In this example, the lexicon
 contains the entries in +1. 
<EQN/>
Note that the value of `measure' in the root entry is uninstantiated; 
it is determined from the feature values in R5, R6 and/or the word grammar
 (see infra, <CREF/>). 
</P>
</DIV>
<DIV ID="3" DEPTH="1" R-NO="3"><HEADER>  Implementation </HEADER>
<P>
There are two current methods for implementing two-level rules (both
implemented in SemHe): (1) compiling rules into finite-state
automata (multi-tape transducers in our case), and (2) interpreting
rules directly. The former provides better performance, while the
latter facilitates the debugging of grammars (by tracing and by
providing debugging utilities along the lines of
 <REF/>). Additionally, the interpreter facilitates the incremental compilation of rules by simply allowing the user to toggle
rules on and off.
</P>
<P>
The compilation of the above formalism into automata is described by
 <REF/>. The following is a description of the interpreter.
</P>
<DIV ID="3.1" DEPTH="2" R-NO="1"><HEADER>  Internal Representation </HEADER>
<P>
The word grammar is compiled into a shift-reduce
parser. In addition, a first-and-follow algorithm, based on
 <REF/>, is applied to compute the feasible follow categories for each category type. The set of feasible follow categories, NextCats, of a particular category Cat is returned by the
predicate  FOLLOW(+Cat, -NextCats).  Additionally, 
FOLLOW(bos, NextCats) returns the set of category symbols
at the beginning of strings, and eos <EQN/>
NextCats
indicates that Cat may occur at the end of strings.
</P>
<P>
The lexical component is implemented as character tries
 <REF/>, one per tape. Given a list of lexical strings, Lex, and a list of lexical pointers, LexPtrs, the predicate 
<EQN/>#17		 <EQN/>
succeeds iff there are transitions on Lex from LexPtrs; it returns NewLexPtrs, and the categories,
LexCats, at the end of morphemes, if any.
</P>
<P>
Two-level predicates are converted into an internal representation:
(1) every left-context expression is reversed and appended to an
uninstantiated tail; (2) every right-context expression is appended to
an uninstantiated tail; and (3) each rule is assigned a 6-bit
`precedence value' where every bit represents one of the six lexical
and surface expressions.  If an expression is not an empty list
(i.e. context is specified), the relevant bit is set.  In analysis,
surface expressions are assigned the most significant bits, while
lexical expressions are assigned the least significant ones. In
generation, the opposite state of affairs holds. Rules are then
reasserted in the order of their precedence value. This ensures that
rules which contain the most specified expressions are tested first
resulting in better performance.
</P>
</DIV>
<DIV ID="3.2" DEPTH="2" R-NO="2"><HEADER>  The Interpreter Algorithm </HEADER>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
   {\sc Partition}({\em SurfDone, SurfToDo, LexDone, LexToDo,
                       LexPtrs, NextCats, Result})\\
   mmm\=mmm\=\hspace{1.5in}\= \kill
   {\em SurfToDo} = {\tt []} {\bf \}
      \>\>\>\% surface string exhausted \\
   {\em LexToDo} =  {\tt [[],[],$\cdots$ ,[]]} {\bf \} 
      \>\>\> \% all lexical strings exhausted \\
   {\em LexPtrs} = {\tt [rt,rt,$\cdots$ ,rt]} {\bf \} 
      \>\>\> \% all lexical pointers are at the root node \\
   {\tt eos} $\in$\space {\em NextCats}  {\bf \}
      \>\>\> \% end-of-string\\
   {\em Result} = {\tt []}.
      \>\>\> \% output: no more results
   \end{tabbing}
   \end{minipage}}$ -->
<EQN/>
   Listing 2
</P>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
   {\sc Partition}(\= {\em SurfDone, SurfToDo, LexDone, LexToDo,}
                       {\em LexPtrs, NextCats},\\
                    \> [{\em ResultHead $\mid$\space ResultTail}])\\
   mmm\=mmm\=\hspace{2.5in}\= \kill
   {\bf there is}
         tl\_rule({\em Id, LLC, Lex, RLC, Op, LSC, Surf, RSC, Variables, 
                  Features}) {\bf such that}\\
   \> ({\em Op} = ({\tt =>} {\bf or} {\tt <=>}), {\em LexDone} = {\em LLC},
           {\em SurfDone} = {\em LSC},\\
   \>{\em SurfToDo} = {\em Surf} + {\em RSC} {\bf and}
           {\em LexToDo} = {\em Lex} + {\em RLC}) {\bf \}\\
   {\sc Lexical-Transitions}%
({\em Lex, LexPtrs, NewLexPtrs, LexCats}) {\bf \}\\
\par {\bf push} {\em Features} {\bf onto} {\em FeatureStack} {\bf \}
      \>\>\> \% keep track of rule features\\
\par {\bf if} {\em LexCats} $\neq$\space {\tt nil} {\bf then}
     \>\>\> \% found a morpheme boundary? \\
\par \>{\bf while} {\em FeatureStack} {\bf is not empty}
      \>\> \% unify rule and lexical features\\
   \>\> {\bf unify} {\em LexCats} {\bf with} 
        ({\bf pop} {\em FeatureStack}) {\bf \}\\
\par \> {\bf push} {\em LexCats} {\bf onto} {\em ParseStack} {\bf \}
      \>\> \% update the parse stack\\
\par \> {\bf if} {\em LexCats} $\in$\space {\em NextCats} {\bf then}
      \>\> \% get next category\\
   \>\>   {\sc Follow}({\em LexCats, NewNextCats})\\
   {\bf end if \}\\
\par {\em ResultHead} = \={\em Id/SurfDone/Surf/RSC/}\\
   \> {\em LexDone/Lex/RLC/LexCats} {\bf \}\\
\par mmm\=mmm\=\hspace{2.5in}\= \kill
   {\em NewSurfDone} = {\em SurfDone} + {\bf reverse} {\em Surf} 
                {\bf \} \>\>\>  \% make new arguments ... \\
   {\em NewSurfToDo} = {\em RSC} {\bf \}
      \>\>\>  \% ... and recurse\\
   {\em NewLexDone} = {\em LexDone} + {\bf reverse} {\em Lex} 
                {\bf \}\\
   {\em NewLexToDo} = {\em RLC} {\bf \}\\
      {\sc Partition}(\= {\em NewSurfDone, NewSurfToDo},\\
                  \> \> {\em NewLexDone, 
                           NewLexToDo,}\\
                  \> \> {\em NewLexPtrs, NewNextCats,
                         ResultTail}) {\bf \}\\
\par mmm\=mmm\=\hspace{2.5in}\= \kill
   {\bf for all} {\em SetId(Var)} $\in$\space {\em Variables}
      \>\>\> \% check variables\\
   \>{\bf there is} tl\_set({\em SetId, Set}) {\bf such that}
                 {\em Var} $\in$\space {\em Set}.
   \end{tabbing}
   \end{minipage}}$ -->
<EQN/>
   Listing 3
</P>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
   {\sc Coerce}(\=[{\em Id/LSC/Surf/RSC/LLC/Lex/RLC/LexCats} $\mid$       {\em ResultTail}], {\em PrevCats}, \\
      \> [{\em Id/Surf/Lex} $\mid$\space {\em PartitionTail}])\\
   \=mmm\=mmm\kill
   {\bf if} {\em LexCats} $\neq$\space {\tt nil} {\bf then} \\
      \>\> {\em CurrentCats} = {\em LexCats}\\
      {\bf else}\\\>\> {\em CurrentCats} = {\em PrevCats} {\bf \}\\
\par {\bf not}
      {\sc Invalid-Partition}({\em LSC, Surf, RSC, LLC, Lex, RLC, CurrentCats})
      {\bf \}\\
      {\sc Coerce}({\em ResultTail, CurrentCats, PartitionTail}).
   \end{tabbing}
  \end{minipage}}$ -->
<EQN/>
   Listing 4
</P>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
   {\sc Invalid-Partition}({\em LSC, Surf, RSC, LLC, Lex, RLC, Cats})\\
   mmm\=mmm\=\hspace{2in}\= \kill
   {\bf there is}
         tl\_rule({\em Id, LLC, Lex, RLC, {\tt <=>}, LSC, NotSurf, RSC, 
                  Variables, Features}) {\bf such that} \\
   \>{\em NotSurf} $\neq$\space {\em Surf} {\bf \}\\
\par {\bf for all} {\em SetId(Var)} $\in$\space {\em Variables}
      \>\>\>  \% check variables\\
   \>{\bf there is} tl\_set({\em SetId, Set}) {\bf such that}
                   {\em Var} $\in$\space {\em Set} {\bf \}\\
   {\bf unify} {\em Cats} {\bf with} {\em Features} {\bf \}\\
   {\bf fail}.
   \end{tabbing}
   \end{minipage}}$ -->
<EQN/>
   Listing 5
</P>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
   {\sc Two-Level-Analysis}(?{\em Surf}, ?{\em Lex}, -{\em Partition}, -{\em Parse}) \\
   \=mmm\= \kill
      {\sc Follow}({\tt bos}, {\em NextCats}) {\bf \}\\
      {\sc Partition}(\={\tt []}, {\em Surf},
                       {\tt [[],[],$\cdots$ ,[]]}, {\em Lex},
                       {\tt [rt,rt,$\cdots$ ,rt]}, {\em NextCats},
                       {\em Result}) {\bf \} \\
      {\sc Coerce}({\bf reverse} {\em Result}, {\tt nil}, 
           {\em Partition}) {\bf \} \\
      {\sc Shift-Reduce}({\em ParseStack}, {\em Parse}).
   \end{tabbing}
   \end{minipage}}$ -->
<EQN/>
   Listing 6
</P>
<P>
The algorithms presented below are given in terms of prolog-like
non-deterministic operations. A clause is satisfied iff all the
conditions under it are satisfied.
The predicates are depicted top-down in +1. 
 (SemHe makes use of an earlier implementation by <REF/>.) 
</P>
<P>
<EQN/>
</P>
<P>
In order to minimise accumulator-passing arguments, we assume the
following initially-empty stacks: ParseStack accumulates the
category structures of the morphemes identified, and FeatureStack maintains the rule features encountered so far.  
(`+' indicates concatenation.)
</P>
<P>
 PARTITION partitions a two-level analysis into sequences of
lexical-surface pairs, each licenced by a rule. The base case of the
 predicate is given in Listing 2, and the recursive case in Listing 3.
</P>
<P>
The recursive  COERCE predicate ensures that no partition is
violated by an obligatory rule.  It takes three arguments: Result is the output of  PARTITION (usually reversed by the
calling predicate, hence,  COERCE deals with the last partition
first), PrevCats is a register which keeps track of the last
morpheme category encountered, and Partition returns selected
elements from Result. The base case of the predicate is simply
 COERCE([], _, []) - i.e., no more partitions.  
The recursive case is shown in Listing 4. CurrentCats keeps
track of the category of the morpheme which occures in the current
partition.  The invalidity of a partition is determined by 
INVALID-PARTITION (Listing 5).
</P>
<P>
 TWO-LEVEL-ANALYSIS (Listing 6) is the main predicate. It takes a
surface string or lexical string(s) and returns a list of partitions
and a morphosyntactic parse tree.  To analyse a surface form, one
calls  TWO-LEVEL-ANALYSIS(+Surf, -Lex, -Partition, -Parse).  To generate a surface form, one calls
 TWO-LEVEL-ANALYSIS(-Surf, +Lex, -Partition,
-Parse).
</P>
</DIV>
</DIV>
<DIV ID="4" DEPTH="1" R-NO="4"><HEADER>      Developing Non-Linear Grammars
</HEADER>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
      {}\= tl\_set({\tt radical, [k,t,b]}).\kill
      \> \tlruleintablong{R7}{[[],[],[]]}{[[v],[],[V]]}{[[c$_3$ ,$\flat$ ,e],[],[]]}{<=>}
                      {[]}{[]}{[]}
                      {[vowel(V)]|[[],[],[]]}\\
      \> \tlruleintablong{R8}{[]}{[V1]}{[C,V2]}{<=>}
                      {[]}{[]}{[]}
                      {[vowel(V1),vowel(V2),radical(C)]|[[],[],[]]}
   \end{tabbing}
   \end{minipage}}$ -->
<EQN/>
   Listing 7
</P>
<P>
When developing Semitic grammars, one comes across various issues and
problems which normally do not arise with linear grammars. Some can be
solved by known methods or `tricks'; others require extensions in
order to make developing grammars easier and more elegant.
  This
section discuss issues which normally do not arise when compiling
linear grammars.
</P>
<DIV ID="4.1" DEPTH="2" R-NO="1"><HEADER>  Linearity vs. Non-Linearity </HEADER>
<P>
In Semitic languages, non-linearity occurs only in stems. Hence,
lexical descriptions of stems make use of three lexical tapes
(pattern, root  vocalism), while those of prefixes and suffixes use
the first lexical tape. This requires duplicating rules when stating
lexical constraints. Consider rule R4 (Listing 1). It allows the
deletion of the first stem vowel by the virtue of RLC (even if <EQN/>
was not indexed); hence /katab/ 
<!-- MATH: $\rightarrow$ -->
<EQN/>
/ktab/. Now
consider adding the suffix {eh} `him/it': /katab/+{eh}
<!-- MATH: $\rightarrow$ -->
<EQN/>
/katbeh/, where the second stem vowel is deleted since
deletion applies right-to-left; however, RLC can only cope with stem
vowels. Rule R7 (Listing 7) is required. One might suggest
placing constraints on surface expressions instead. However, doing so
causes surface expressions to be dependent on other rules.
</P>
<P>
Additionally, Lex in R4 and R7 deletes stem
vowels. Consider adding the prefix {wa} `and': {wa} + /katab/ +
{eh} 
<!-- MATH: $\rightarrow$ -->
<EQN/>
/wkatbeh/, where the prefix vowel is also
deleted. To cope with this, two additional rules like R4 and R7 are
required, but with Lex = [[V],[],[]].  
</P>
<P>
We resolve this by allowing the user to write expansion rules of the
from
</P>
<P>
<EQN/>
</P>
<P>
In our example, the expansion rules in +1 are needed.
<EQN/>
The linguist can then rewrite R4 as R8 (Listing 7), and expand it with
the command expand(R8). This produces four rules of the form of
R4, but with the following expressions for Lex and
 RLC: 
</P>
<IMAGE TYPE="TABLE"/>
<IMAGE TYPE="TABLE"/>
</DIV>
<DIV ID="4.2" DEPTH="2" R-NO="2"><HEADER>  Vocalisation </HEADER>
<P>
Orthographically, Semitic texts are written without short vowels.  It
 was suggested by <REF/>, et. seq.] and <REF/> to allow short vowels to be optionally deleted. This, however, puts a
constraint on the grammar: no surface expression can contain a vowel,
lest the vowel is optionally deleted.
</P>
<P>
We assume full vocalisation in writing rules. A second set of rules
can allow the deletion of vowels. The whole grammar can be taken as
the composition of the two grammars: e.g. {cvcvc},{ktb},{aa}
<!-- MATH: $\rightarrow$ -->
<EQN/>
/ktab/ 
<!-- MATH: $\rightarrow$ -->
<EQN/>
[ktab, ktb].
</P>
</DIV>
<DIV ID="4.3" DEPTH="2" R-NO="3"><HEADER>    Morphosyntactic Issues
</HEADER>
<P>
<!-- MATH: $\fbox{\begin{minipage}{\linewidth}
\begin{tabbing}
      synrule({\tt rule1}, \= {\tt stem:[\Xbar=-2,measure=M,measure=p`al|pa``el]},\\
                           \> [\={\tt pattern:[]},
                           {\tt root:[measure=M,measure=p`al|pa``el]}, \\
                           \> \> {\tt vocalism:[measure=M,measure=p`al|pa``el]}]).\\
      synrule({\tt rule2}, \= {\tt stem:[\Xbar=-2,measure=M]},\\
                           \> [\={\tt stem\_affix:[measure=M]}, \\
                           \>\>  {\tt pattern:[]},
                             {\tt root:[measure=M]},
                             {\tt vocalism:[measure=M]}]).\\
      synrule({\tt rule3}, \= {\tt stem:[\Xbar=-1,measure=M,mood=act]},\\
                           \> [\={\tt stem:[bar=-2,measure=M,mood=act]}]).\\
      synrule({\tt rule4}, \= {\tt stem:[\Xbar=-1,measure=M,mood=pass]},\\
                           \> [\={\tt reflexive:[]},
                              {\tt stem:[\Xbar=-2,measure=M,mood=pass]}]).\\
      synrule({\tt rule5}, \= {\tt stem:[\Xbar=0,measure=M,mood=MD,npg=s\3\m]},\\
                           \> [\={\tt stem:[\Xbar=-1,measure=M,mood=MD]}]).\\
      synrule({\tt rule6}, \= {\tt stem:[\Xbar=0,measure=M,mood=MD,npg=NPG]},\\
                           \> [\={\tt stem:[\Xbar=-1,measure=M,mood=MD]},
                               {\tt vim:[type=suff,circum=no,npg=NPG]}]).\\
      synrule({\tt rule7}, \= {\tt stem:[\Xbar=0,measure=M,mood=MD,npg=NPG]},\\
                           \> [\={\tt vim:[type=pref,circum=no,npg=NPG]},
                               {\tt stem:[\Xbar=-1,measure=M,mood=MD]}]).\\
      synrule({\tt rule8}, \= {\tt stem:[\Xbar=0,measure=M,mood=MD,npg=NPG]},\\
                           \> [\={\tt vim:[type=pref,circum=yes,npg=NPG]},
                              {\tt stem:[\Xbar=-1,measure=M,mood=MD]},\\
                           \>\> {\tt vim:[type=suff,circum=yes,npg=NPG]}]).
   \end{tabbing}
  \end{minipage}}$ -->
<EQN/>
   Listing 8
</P>
<P>
Finite-state models of two-level morphology implement morphotactics in
two ways: using `continuation patterns/classes'
 <REF/>,<REF/>,<REF/> or unification-based grammars
 <REF/>,<REF/>.  The former fails to provide elegant morphosyntactic parsing for Semitic languages, as will be illustrated
in this section.
</P>
<DIV ID="4.3.1" DEPTH="3" R-NO="1"><HEADER>  Stems and -Theory </HEADER>
<P>
A pattern, a root and a vocalism do not alway produce a free stem
which can stand on its own. In Syriac, for example, some verbal forms
are bound: they require a stem morpheme which indicates the
measure in question, e.g. the prefix {a} for af`el
stems. Additionally, passive forms are marked by the reflexive
morpheme {et}, while active forms are not marked at all.
</P>
<P>
This structure of stems can be handled hierarchically using
-theory.  A stem whose stem morpheme is known is assigned =-2 (Rules 1-2 in Listing 8).  Rules which indicate mood can
apply only to stems whose measure has been identified (i.e. they have
=-2). The resulting stems are assigned =-1
(Rules 3-4 in Listing 8). The parsing of Syriac /etkteb/ (from {
et}+/kateb/ after the deletion of /a/ by R4) appears in
 +1. 
<EQN/>
</P>
<P>
Now free stems which may stand on their own can be assigned =0. However, some stems require verbal inflectional markers.
</P>
</DIV>
<DIV ID="4.3.2" DEPTH="3" R-NO="2"><HEADER>       Verbal Inflectional Markers
</HEADER>
<P>
<!-- MATH: $\fbox{\begin{minipage}{5.5in}
\begin{tabular}{lllll}
Verb Class  Inflections Analysed  1st Analysis Subsequent Analysis  Mean\\
                                     (sec/word)   (sec/word)  (sec/word)\\
   \hline
   Strong                   78  5.053    0.028   2.539 \\
   Initial {\em n\={u}n}    52  6.756    0.048   3.404 \\
   Initial {\em \={a}laph}  57  4.379    0.077   2.228\\
   Middle {\em \={a}laph}   67  5.107    0.061   2.584 \\
   Overall mean             63.5 5.324    0.054   {\bf 2.689}
\end{tabular}
   \end{minipage}}$ -->
<EQN/>
   Table 1
</P>
<P>
With respect to verbal inflexional markers (VIMs), there are various
types of Semitic verbs: those which do not require a VIM
(e.g. sing. 3rd masc.), and those which require a VIM in the form of a
prefix (e.g. perfect), suffix (e.g. some imperfect forms), or
circumfix (e.g. other imperfect forms).
</P>
<P>
Each VIM is lexically marked inter alia with two features: `type'
which states whether it is a prefix or a suffix, and `circum' which
denotes whether it is a circumfix.
Rules 5-8 (Listing 8) handle this.
</P>
<P>
The parsing of Syriac /netkatbun/ (from {ne}+ {
et}+/katab/+{un}) appears in +1.
<EQN/>
</P>
<P>
 <REF/> handle this problem by finding a logical expression for the prefix and suffix portions of circumfix morphemes,
and use unification to generate only the correct forms - see
 <REF/>, p. 158]. This approach, however, cannot be used here since, unlike Arabic, not all Syriac VIMs are in the form of
circumfixes.
</P>
</DIV>
<DIV ID="4.3.3" DEPTH="3" R-NO="3"><HEADER>  Interfacing with a Syntactic Parser </HEADER>
<P>
A Semitic `word' (string separated by word boundary) may in fact be a
clause or a sentence. Therefore, a morphosyntactic parsing of a `word'
may be a (partial) syntactic parsing of a sentence in the form of a
(partial) tree. The output of a
morphological analyser can be structured in a manner suitable for
 syntactic processing. Using tree-adjoining grammars <REF/> might be a possibility.
</P>
</DIV>
</DIV>
</DIV>
<DIV ID="5" DEPTH="1" R-NO="5"><HEADER>  Performance </HEADER>
<P>
To test the integrity, robustness and performance of the
implementation, a two-level grammar of the most frequent words in the
Syriac New Testament was compiled based on the data in
 <REF/>. The grammar covers most classes of verbal and nominal forms, in addition to prepositions, proper nouns
and words of Greek origin. A wider coverage would involve enlarging
the lexicon (currently there are 165 entries) and might triple the
number of two-level rules (currently there are c. 50 rules).
</P>
<P>
Table 1 provides the results of analysing verbal classes. The test for
each class represents analysing most of its inflexions. The test was
executed on a Sparc ELC computer.
</P>
<P>
By constructing a corpus which consists only of the most frequent
words, one can estimate the performance of analysing the corpus as
follows,
</P>
<P>
<EQN/>
</P>
<P>
where n is the number of distinct words in the corpus and fi is
the frequency of occurrence of the ith word. The SEDRA database
 <REF/> provides such data. All occurrences of the 100 most frequent lexemes in their various inflections (a total of 72,240
occurrences) can be analysed at the rate of 16.35
words/sec. (Performance will be less if additional rules are added for
larger coverage.)
</P>
<P>
The results may not seem satisfactory when compared with other prolog
implementations of the same formalism (cf. 50 words/sec,
 in <REF/>). One should, however, keep in mind the complexity of Syriac morphology. In addition to morphological non-linearity,
phonological conditional changes - consonantal and vocalic - occur
in all stems, and it is not unusual to have more than five such
changes per word. Once developed, a grammar is usually compiled
into automata which provides better performance.
</P>
</DIV>
<DIV ID="6" DEPTH="1" R-NO="6"><HEADER>  Conclusion </HEADER>
<P>
This paper has presented a computational morphology system which is
adequate for handling non-linear grammars. We are currently expanding
the grammar to cover the whole of New Testament Syriac. One of our
future goals is to optimise the prolog implementation for speedy
processing and to add debugging facilities along the lines of
 <REF/>. 
</P>
<P>
For useful results, a Semitic morphological analyser needs to interact
with a syntactic parser in order to resolve ambiguities. Most
non-vocalised strings give more than one solution, and some
inflectional forms are homographs even if fully vocalised (e.g. in
Syriac imperfect verbs: sing. 3rd masc. = plural 1st common, and
sing. 3rd fem. = sing. 2nd masc.). We mentioned earlier the possibility
of using TAGs.
</P>
<DIV ID="6.1" DEPTH="2" R-NO="1"><HEADER>Bibliography </HEADER>
<P>
Aho, A. and Ullman, J. (1977).
Principles of Compiler Design.
Addison-Wesley.
</P>
<P>
Antworth, E. (1990).
PC-KIMMO: A two-Level Processor for Morphological Analysis.
Occasional Publications in Academic Computing 16. Summer Institute of
  Linguistics, Dallas.
</P>
<P>
Bear, J. (1986).
A morphological recognizer with syntactic and phonological rules.
In COLING-86, pages 272-6.
</P>
<P>
Beesley, K. (1990).
Finite-state description of Arabic morphology.
In Proceedings of the Second Cambridge Conference: Bilingual
  Computing in Arabic and English.
</P>
<P>
Beesley, K. (1991).
Computer analysis of Arabic morphology.
In Comrie, B. and Eid, M., editors, Perspectives on Arabic
  Linguistics III: Papers from the Third Annual Symposium on Arabic
  Linguistics. Benjamins, Amsterdam.
</P>
<P>
Beesley, K., Buckwalter, T., and Newton, S. (1989).
Two-level finite-state analysis of Arabic morphology.
In Proceedings of the Seminar on Bilingual Computing in Arabic
  and English. The Literary and Linguistic Computing Centre, Cambridge.
</P>
<P>
Bird, S. and Ellison, T. (1994).
One-level phonology.
Computational Linguistics, 20(1):55-90.
</P>
<P>
Carter, D. (1995).
Rapid development of morphological descriptions for full language
  processing systems.
In EACL-95, pages 202-9.
</P>
<P>
Goldsmith, J. (1976).
Autosegmental Phonology.
PhD thesis, MIT.
Published as Autosegmental and Metrical Phonology, Oxford 1990.
</P>
<P>
Grimley-Evans, E., Kiraz, G., and Pulman, S. (1996).
Compiling a partition-based two-level formalism.
In COLING-96.
Forthcoming.
</P>
<P>
Joshi, A. (1985).
Tree-adjoining grammars: How much context sensitivity is required
  to provide reasonable structural descriptions.
In Dowty, D., Karttunen, L., and Zwicky, A., editors, Natural
  Language Parsing. Cambridge University Press.
</P>
<P>
Karttunen, L. (1983).
Kimmo: A general morphological processor.
Texas Linguistic Forum, 22:165-86.
</P>
<P>
Karttunen, L. (1993).
Finite-state lexicon compiler.
Technical report, Palo Alto Research Center, Xerox Corporation.
</P>
<P>
Karttunen, L. and Beesley, K. (1992).
Two-level rule compiler.
Technical report, Palo Alto Research Center, Xerox Corporation.
</P>
<P>
Kataja, L. and Koskenniemi, K. (1988).
Finite state description of Semitic morphology.
In COLING-88, volume 1, pages 313-15.
</P>
<P>
Kay, M. (1987).
Nonconcatenative finite-state morphology.
In EACL-87, pages 2-10.
</P>
<P>
Kiraz, G. (1994a).
Automatic concordance generation of Syriac texts.
In Lavenant, R., editor, VI Symposium Syriacum 1992, Orientalia
  Christiana Analecta 247, pages 461-75. Pontificio Institutum Studiorum
  Orientalium.
</P>
<P>
Kiraz, G. (1994b).
Lexical Tools to the Syriac New Testament.
JSOT Manuals 7. Sheffield Academic Press.
</P>
<P>
Kiraz, G. (1994c).
Multi-tape two-level morphology: a case study in Semitic non-linear
  morphology.
In COLING-94, volume 1, pages 180-6.
</P>
<P>
Kiraz, G. (1995).
Introduction to Syriac Spirantization.
Bar Hebraeus Verlag, The Netherlands.
</P>
<P>
Kiraz, G. (1996).
Computational Approach to Non-Linear Morphology.
PhD thesis, University of Cambridge.
</P>
<P>
Knuth, D. (1973).
The Art of Computer Programming, volume 3.
Addison-Wesley.
</P>
<P>
Kornai, A. (1991).
Formal Phonology.
PhD thesis, Stanford University.
</P>
<P>
Koskenniemi, K. (1983).
Two-Level Morphology.
PhD thesis, University of Helsinki.
</P>
<P>
Lavie, A., Itai, A., and Ornan, U. (1990).
On the applicability of two level morphology to the inflection of
  Hebrew verbs.
In Choueka, Y., editor, Literary and Linguistic Computing 1988:
  Proceedings of the 15th International Conference, pages 246-60.
</P>
<P>
McCarthy, J. (1981).
A prosodic theory of nonconcatenative morphology.
Linguistic Inquiry, 12(3):373-418.
</P>
<P>
Narayanan, A. and Hashem, L. (1993).
On abstract finite-state morphology.
In EACL-93, pages 297-304.
</P>
<P>
Pulman, S. and Hepple, M. (1993).
A feature-based formalism for two-level phonology: a description and
  implementation.
Computer Speech and Language, 7:333-58.
</P>
<P>
Ritchie, G., Black, A., Russell, G., and Pulman, S. (1992).
Computational Morphology: Practical Mechanisms for the English
  Lexicon.
MIT Press, Cambridge Mass.
</P>
<P>
Ruessink, H. (1989).
Two level formalisms.
Technical Report 5, Utrecht Working Papers in NLP.
</P>
<P>
Shieber, S. (1986).
An Introduction to Unification-Based Approaches to Grammar.
CSLI Lecture Notes Number 4. Center for the Study of Language and
  Information, Stanford.
</P>
<P>
Sproat, R. (1992).
Morphology and Computation.
MIT Press, Cambridge Mass.
</P>
<P>
Wiebe, B. (1992).
Modelling autosegmental phonology with multi-tape finite state
  transducers.
Master's thesis, Simon Fraser University.
</P>
<DIV ID="6.1.1" DEPTH="3" R-NO="1"><HEADER>Footnotes</HEADER>
<P>
   Supported by a Benefactor Studentship
from St John's College. This research was done under the supervision of
Dr Stephen G. Pulman. Thanks to the anonymous reviewers for their
comments. All mistakes remain mine.
  Although it is possible to express some classes
of non-linear rules using standard two-level formalisms by means of
ad hoc diacritics, e.g., infixation in
 <REF/>, p. 156], there are no means for expressing other classes as root-and-pattern phenomena.
 ]. See  <REF/> for a review. 
  The
name SemHe (Syriac semh `rays') is not an
acronym, but the title of a grammatical treatise written by the Syriac
polymath (inter alia mathematician and grammarian) Bar
`Ebroy (1225-1286), viz. ktob
dsemh `The Book of Rays'.
  We describe here the terms which
are relevant to this paper. For a full description, see
 <REF/>. 
  Spirantization is ignored here; 
for a discussion on Syriac spirantization, 
 see <REF/>. 
  Syriac verbs are classified under
various measures (forms). The basic ones are: p`al, pa``el and
'af`el.
  This
 analysis is along the lines of <REF/> - based on  autosegmental phonology <REF/>. 
  Spreading is ignored here;
for a discussion, 
 see <REF/>. 
  For efficiency, variables
appearing in left-context and centre expressions are evaluated after
 LEXICAL-TRANSITIONS since they will be fully instantiated then;
only right-contexts are evaluated after the recursion.
  Note, however, that the expand command does not
insert <EQN/>
randomly in context expressions.
  In the remaining examples, it is assumed that
the lexicon and two-level rules are expanded to cater for the new
material.
</P>
</DIV>
</DIV>
</DIV>
</BODY>
</MINIMAL-DOC>
