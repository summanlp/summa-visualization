<?xml version='1.0'?>
<!DOCTYPE MINIMAL-DOC SYSTEM "mini.dtd">
<MINIMAL-DOC>
<TITLE>DATR Theories and DATR Models</TITLE>
<ABSTRACT>
<P>
 Evans and Gazdar <REF/>,<REF/> introduced DATR as a simple, non-monotonic language for representing natural language lexicons.
Although a number of implementations of DATR exist, the full language
has until now lacked an explicit, declarative semantics. This paper
rectifies the situation by providing a mathematical semantics for
DATR. We present a view of DATR as a language for defining certain
kinds of partial functions by cases. The formal model provides a
transparent treatment of DATR's notion of global context. It is shown
that DATR's default mechanism can be accounted for by interpreting
value descriptors as families of values indexed by paths.
</P>
</ABSTRACT>
<BODY>
<DIV ID="1" DEPTH="1" R-NO="1"><HEADER>    Introduction
</HEADER>
<P>
DATR was introduced by Evans and Gazdar <REF/> as a
simple, declarative language for representing lexical knowledge in terms
of path/value equations.  The language lacks many of the constructs
found in general purpose, knowledge representation formalisms, yet it has
sufficient expressive power to capture concisely the structure of
lexical information at a variety of levels of linguistic description.
At the present time, DATR is probably the most widely-used formalism
for representing natural language lexicons in the natural language
processing (NLP) community. There are around a dozen different
implementations of the language and large DATR lexicons have been
constructed for use in a variety of applications
 <REF/>,<REF/>,<REF/>. DATR has been applied to problems in  inflectional and derivational morphology <REF/>,<REF/>,<REF/>,  lexical semantics <REF/>, morphonology <REF/>, prosody  <REF/> and speech <REF/>. In more recent work, the language has been used to provide a concise encoding of Lexicalised Tree
 Adjoining Grammar <REF/>,<REF/>. 
</P>
<P>
A primary objective in the development of DATR has been the provision
of an explicit, mathematically rigorous semantics. This goal was
addressed in one of the first publications on the language
 <REF/>. The definitions given there deal with a subset of DATR that includes core features of the language such as the notions of local and global inheritance and DATR's default mechanism. However, they
exclude some important and widely-used constructs, most notably string
(or `list') values and evaluable paths. Moreover, it is by no means
clear that the approach can be generalized appropriately to cover these
features.  In particular, the formal apparatus introduced by Evans and
Gazdar in <REF/> provides no explicit model of DATR 's
notion of global context. Rather, local and global inheritance
are represented by distinct semantic functions <EQN/>
and
<EQN/>.
This approach is possible only on the (overly restrictive)
assumption that DATR statements involve either local or global
inheritance relations, but never both.
</P>
<P>
The purpose of the present paper is to remedy the deficiencies of the
 work described in <REF/> by furnishing DATR with a transparent, mathematical semantics. There is a standard view of DATR as a language
for representing a certain class of non-monotonic inheritance networks
(`semantic nets').  While this perspective provides an intuitive and
appealing way of thinking about the structure and representation of
lexical knowledge, it is less clear that it provides an accurate or
particularly helpful picture of the DATR language itself. In fact,
there are a number of constructs available in DATR that are impossible
to visualize in terms of simple inheritance hierarchies. For this
reason, the work described in this paper reflects a rather different
perspective on DATR, as a language for defining certain kinds of
partial functions by cases. In the following sections this viewpoint is
 made more precise. Section <CREF/> presents the syntax of the DATR language and introduces the notion of a DATR theory.  An
informal introduction to the DATR language is provided, by example, in
 section <CREF/>.  The semantics of DATR is then covered in  two stages. Section <CREF/> introduces DATR interepretations and describes the semantics of a restricted version of the language
without defaults. The treatment of implicit information is covered in
 section <CREF/>, which provides a definition of a default model for a DATR theory.
</P>
</DIV>
<DIV ID="2" DEPTH="1" R-NO="2"><HEADER>    DATR Theories
</HEADER>
<P>
Let 
<!-- MATH: $\mbox{\sc node}$ -->
<EQN/>
and 
<!-- MATH: $\mbox{\sc atom}$ -->
<EQN/>
be disjoint sets of symbols (the nodes
and atoms respectively). Nodes are denoted by N and atoms by
a. The set  DESC of DATR value descriptors (or simply descriptors) is built up from the atoms and nodes as shown
below. Descriptors are denoted by d.
</P>
<P>
<ITEMIZE>
<ITEM>
<!-- MATH: $a \in \mbox{\sc desc}$ -->
<EQN/>
for any 
<!-- MATH: $a \in \mbox{\sc atom}$ -->
<EQN/>
</ITEM>
<ITEM>For any 
<!-- MATH: $N \in \mbox{\sc node}$ -->
<EQN/>
and 
<!-- MATH: $d_1 \ldots d_n \in \mbox{\sc desc}$ -->
<EQN/>:
<!-- MATH: $N:\langle d_1 \cdots d_n \rangle \in \mbox{\sc desc}$ -->
<EQN/>
<!-- MATH: $\mbox{``}N:\langle d_1 \cdots d_n \rangle\mbox{''} \in \mbox{\sc desc}$ -->
<EQN/>
<!-- MATH: $\mbox{``}\langle d_1 \cdots d_n \rangle\mbox{''} \in \mbox{\sc desc}$ -->
<EQN/>
<!-- MATH: $\mbox{``}N\mbox{''}\in \mbox{\sc desc}$ -->
<EQN/>
</ITEM>
</ITEMIZE>
</P>
<P>
Value descriptors are either atoms or inheritance descriptors,
where an inheritance descriptor is further distinguished as either local (unquoted) or global (quoted). There is just one kind
of local descriptor (node/path), but three kinds of global descriptor
 (node/path, path and node) . 
</P>
<P>
A path 
<!-- MATH: $\langle a_1 \ldots a_n \rangle$ -->
<EQN/>
is a (possibly empty)
sequence of atoms enclosed in angle brackets. Paths are denoted by P.
For N a node, P a path and 
<!-- MATH: $\alpha \in \mbox{\sc atom}^*$ -->
<EQN/>
a (possibly empty)
sequence of atoms, an equation of the form 
<!-- MATH: $N:P = \alpha$ -->
<EQN/>
is
called an extensional sentence.  Intuitively, an extensional
sentence 
<!-- MATH: $N:P = \alpha$ -->
<EQN/>
states that the value associated with the
path P at node N is <EQN/>.
For <EQN/>
a (possibly empty) sequence
of value descriptors, an equation of the form 
<!-- MATH: $N:P == \phi$ -->
<EQN/>
is
called a definitional sentence. A definitional sentence
<!-- MATH: $N:P == \phi$ -->
<EQN/>
specifies a property of the node N, namely that
the path P is associated with the value defined by the sequence of
value descriptors <EQN/>.
</P>
<P>
A collection of equations can be used to specify the properties of
different nodes in terms of one another, and a finite set of DATR sentences 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
is called a DATR theory.  In principle, a
DATR theory 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
may consist of any combination of DATR sentences, either definitional or extensional, but in practice, DATR theories are more restricted than this.  The theory 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
is said to
be definitional if it consists solely of definitional sentences
and it is said to be functional if it meets the following
condition:
</P>
<P>
<EQN/>
</P>
<P>
There is a pragmatic distinction between definitional and extensional
sentences akin to that drawn between the language used to define a database
and that used to query it.  DATR interpreters conventionally treat
all extensional sentences as `goal' statements, and evaluate them as soon
as they are encountered. Thus, it is not possible, in practice, to
combine definitional and extensional sentences within a
 theory. Functionality for DATR theories, as defined above, is really a syntactic notion. However, it approximates a deeper, semantic
requirement that the nodes should correspond to (partial) functions from
paths to values.
</P>
<P>
In the remainder of this paper we will use the term (DATR) theory always in the sense functional, definitional (DATR)
theory.  For a given DATR theory 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
and node N of
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>,
we write 
<!-- MATH: $\mbox{$\cal T$ }/N$ -->
<EQN/>
to denote that subset of the sentences in
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
that relate to the node N. That is:
</P>
<P>
<EQN/>
</P>
<P>
The set 
<!-- MATH: $\mbox{$\cal T$ }/N$ -->
<EQN/>
is referred to as the definition of N(in 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>).
</P>
</DIV>
<DIV ID="3" DEPTH="1" R-NO="3"><HEADER>    An Overview of DATR
</HEADER>
<P>
An example of (a fragment of) a DATR theory is shown in
 figure <CREF/>.  The theory makes use of some standard abbreviatory devices that enable nodes and/or paths to be omitted in
certain cases. For example, sets of sentences relating to the same node
are written with the node name implicit in all but the first-given
sentence in the set. Also, we write 
<!-- MATH: $\mbox{\bf See}:\langle  \rangle == \mbox{\bf Verb}$ -->
<EQN/>to abbreviate the definitional sentence
<!-- MATH: $\mbox{\bf See}:\langle  \rangle == \mbox{\bf Verb}:\langle  \rangle$ -->
<EQN/>,
and similarly elsewhere.
</P>
<P>
The theory defines the properties of seven nodes: an abstract
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>
node, nodes 
<!-- MATH: $\mbox{\bf EnVerb}$ -->
<EQN/>,
<!-- MATH: $\mbox{\bf Aux}$ -->
<EQN/>
and
<!-- MATH: $\mbox{\bf Modal}$ -->
<EQN/>,
and three abstract lexemes 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>,
<!-- MATH: $\mbox{\bf Mow}$ -->
<EQN/>and 
<!-- MATH: $\mbox{\bf Can}$ -->
<EQN/>.
Each node is associated with a collection of
definitional sentences that specify values associated with different
paths. This specification is achieved either explicitly, or implicitly. Values given explicitly are specified either directly, by exhibiting a particular value, or indirectly, in
terms of local and/or global inheritance. Implicit specification is
achieved via DATR 's default mechanism.
</P>
<P>
For example, the definition of the 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>
node gives the values
of the paths 
<!-- MATH: $\langle \mbox{\bf syn cat} \rangle$ -->
<EQN/>
and 
<!-- MATH: $\langle \mbox{\bf syn type} \rangle$ -->
<EQN/>directly, as 
<!-- MATH: $\mbox{\bf verb}$ -->
<EQN/>
and 
<!-- MATH: $\mbox{\bf main}$ -->
<EQN/>,
respectively.  Similarly,
the definition of 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
gives the value of 
<!-- MATH: $\langle \mbox{\bf mor
root} \rangle$ -->
<EQN/>
directly as 
<!-- MATH: $\mbox{\bf walk}$ -->
<EQN/>.
On the other hand, the value of the
empty path at 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
is given indirectly, by local inheritance,
as the value of the empty path at 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>.
Note that in itself,
this might not appear to be particularly useful, since the theory does
not provide an explicit value for the empty path in the definition of
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>.
However, DATR's default mechanism permits any
definitional sentence to be applicable not only to the path specified in
its left-hand-side, but also for any rightward extension of that path
for which no more specific definitional sentences exist.  This means
that the statement 
<!-- MATH: $\mbox{\bf Walk}:\langle  \rangle == \mbox{\bf Verb}:\langle  \rangle$ -->
<EQN/>
actually
corresponds to a class of implicit definitional sentences, each
obtained by extending paths on the left- and the right-hand-sides of the
equation in the same manner. Examples include the following:
</P>
<P>
<EQN/>
</P>
<P>
Thus, the value associated with 
<!-- MATH: $\langle \mbox{\bf syn cat} \rangle$ -->
<EQN/>
at 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>is given (implicitly) as the value of 
<!-- MATH: $\langle \mbox{\bf syn cat} \rangle$ -->
<EQN/>
at
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>,
which is given (explicitly) as 
<!-- MATH: $\mbox{\bf verb}$ -->
<EQN/>.
Also, the
values of 
<!-- MATH: $\langle \mbox{\bf mor} \rangle$ -->
<EQN/>
and 
<!-- MATH: $\langle \mbox{\bf mor form} \rangle$ -->
<EQN/>,
amongst many
others, are inherited from 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>.
In the same way, the value of
<!-- MATH: $\langle \mbox{\bf syn cat} \rangle$ -->
<EQN/>
at 
<!-- MATH: $\mbox{\bf Mow}$ -->
<EQN/>
is inherited locally from
<!-- MATH: $\mbox{\bf EnVerb}$ -->
<EQN/>
(which in turn inherits locally from 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>)
and
the value of 
<!-- MATH: $\langle \mbox{\bf syn cat} \rangle$ -->
<EQN/>
at 
<!-- MATH: $\mbox{\bf Can}$ -->
<EQN/>
is inherited locally
from 
<!-- MATH: $\mbox{\bf Modal}$ -->
<EQN/>
(which ultimately gets its value from 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>via 
<!-- MATH: $\mbox{\bf Aux}$ -->
<EQN/>).  Note however, that the following sentences do not follow by default from the specifications given at the relevant
nodes:
</P>
<P>
<EQN/>
</P>
<P>
In each of the above cases, the theory provides an explicit statement
about the value associated with the indicated path at the given node. As
a result the default mechanism is effectively over-ridden.
</P>
<P>
In order to understand the use of global (i.e. quoted) inheritance
descriptors it is necessary to introduce DATR's notion of a global
context.  Suppose then that we wish to determine the value associated with
the path 
<!-- MATH: $\langle \mbox{\bf mor pres} \rangle$ -->
<EQN/>
at the node 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>.
In this
case, the global context will initially consist of the node/path pair
<!-- MATH: $\mbox{\bf Walk}/\langle \mbox{\bf mor pres} \rangle$ -->
<EQN/>.
Now, by default the value
associated with 
<!-- MATH: $\langle \mbox{\bf mor pres} \rangle$ -->
<EQN/>
at 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
is inherited
locally from 
<!-- MATH: $\langle \mbox{\bf mor pres} \rangle$ -->
<EQN/>
at 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>.
This, in turn,
inherits globally from the path 
<!-- MATH: $\langle \mbox{\bf mor root} \rangle$ -->
<EQN/>.
That
is:
</P>
<P>
<EQN/>
</P>
<P>
Consequently, the required value is that associated with 
<!-- MATH: $\langle \mbox{\bf mor
root} \rangle$ -->
<EQN/>
at the `global node' 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
(i.e. the node provided by
the current global context), which is just 
<!-- MATH: $\mbox{\bf walk}$ -->
<EQN/>.
In a similar
fashion, the value associated with 
<!-- MATH: $\langle \mbox{\bf mor past} \rangle$ -->
<EQN/>
at
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
is obtained as 
<!-- MATH: $\mbox{\bf walk ed}$ -->
<EQN/>
(i.e. the string of atoms
formed by evaluating the specification 
<!-- MATH: $\mbox{``}\langle \mbox{\bf mor
root} \rangle\mbox{''}\mbox{ }\mbox{\bf ed}$ -->
<EQN/>
in the global context
<!-- MATH: $\mbox{\bf Walk}/\langle \mbox{\bf mor past} \rangle$ -->
<EQN/>).
</P>
<P>
More generally, the global context is used to fill in the missing node
(path) when a global path (node) is encountered. In addition however,
the evaluation of a global descriptor results in the global context
being set to the new node/path pair. Thus in the preceding example,
after the quoted descriptor 
<!-- MATH: $\mbox{``}\langle \mbox{\bf mor root} \rangle\mbox{''}$ -->
<EQN/>
is
encountered, the global context effectively becomes 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
/
<!-- MATH: $\langle \mbox{\bf mor root} \rangle$ -->
<EQN/>
(i.e. the path component of the global context
is altered). Note that there is a real distinction between a local
inheritance descriptor of the form N:P and it's global counterpart
<!-- MATH: $\mbox{``}N:P\mbox{''}$ -->
<EQN/>.
The former has no effect on the global context, while
the latter effectively overwrites it.
</P>
<P>
Finally, the definition of 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>
in the theory of
 figure <CREF/> illustrates a use of the `evaluable path' construct:
</P>
<P>
<EQN/>
</P>
<P>
This states that the value of 
<!-- MATH: $\langle \mbox{\bf mor form} \rangle$ -->
<EQN/>
at 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>is inherited globally from the path 
<!-- MATH: $\langle \mbox{\bf mor} \cdots \rangle$ -->
<EQN/>,
where the
dots represent the result of evaluating the global path
<!-- MATH: $\mbox{``}\langle \mbox{\bf syn form} \rangle\mbox{''}$ -->
<EQN/>
(i.e. the value associated with
<!-- MATH: $\langle \mbox{\bf syn form} \rangle$ -->
<EQN/>
in the prevailing global context). Evaluable
paths provide a powerful means of capturing generalizations about the
structure of lexical information.
</P>
</DIV>
<DIV ID="4" DEPTH="1" R-NO="4"><HEADER>    DATR Models
</HEADER>
<P>
To a first level of approximation, the DATR theory of
 figure <CREF/> can be understood as a representation of an inheritance hierarchy (a `semantic network') as shown in
 figure <CREF/>. In the diagram, nodes are written as labelled boxes, and arcs correspond to (local) inheritance, or isa links.  Thus, the node 
<!-- MATH: $\mbox{\bf Can}$ -->
<EQN/>
inherits from 
<!-- MATH: $\mbox{\bf Modal}$ -->
<EQN/>which inherits from 
<!-- MATH: $\mbox{\bf Aux}$ -->
<EQN/>
which in turn is a 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>.
The
hierarchy provides a useful means of visualising the overall structure
of the lexical knowledge encoded by the DATR theory.  However, the
semantic network metaphor is of far less value as a way of thinking
about the DATR language itself. Note that there is nothing inherent in
DATR to ensure that theories correspond to simple isa
hierarchies of the kind shown in the figure. What is more, the DATR language includes constructs that cannot be visualized in terms of
simple networks of nodes connected by (local) inheritance links. Global
inheritance, for example, has a dynamic aspect which is difficult to
represent in terms of static links. Similar problems are presented by
both string values and evaluable paths.  Our conclusion is that the
network metaphor is of primary value to the DATR user. In order to
provide a satisfactory, formal model of how the language `works' it is
necessary to adopt a different perspective.
</P>
<P>
DATR theories can be viewed semantically as collections of
definitions of partial functions (`nodes' in DATR parlance) that map
paths onto values.  A model of a DATR theory is then an assignment of
functions to node symbols that is consistent with the definitions of
those nodes within the theory. This picture of DATR as a formalism for
defining partial functions is complicated by two features of the
language however. First, the meaning of a given node depends, in
general, on the global context of interpretation, so that nodes do not
correspond directly to mappings from paths to values, but rather to
functions from contexts to such mappings.  Second, it is
necessary to provide an account of DATR's default mechanism.  It will
be convenient to present our account of the semantics of DATR in two
stages.
</P>
<DIV ID="4.1" DEPTH="2" R-NO="1"><HEADER>    DATR Interpretations
</HEADER>
<P>
This section considers a restricted version of DATR without the default mechanism.
 Section <CREF/> then shows how implicit information can be modelled by treating value descriptors as families of
values indexed by paths.
</P>
<P>
Definition  4.1   
A DATR interpretation is a triple 
<!-- MATH: $I =
(U,\kappa,F)$ -->
<EQN/>,
where
</P>
<P>
1.
U is a set;
2.
<EQN/>
is a function assigning to each element of the set 
<!-- MATH: $(U
\times U^*)$ -->
<EQN/>
a partial function from 
<!-- MATH: $(U \times U^*)$ -->
<EQN/>
to U[*].
3.
F is a valuation function assigning to each node N and atom
a an
element of U, such that distinct atoms are assigned distinct elements.
</P>
<P>
Elements of the set U are denoted by u and elements of U[*] are
denoted by v. Intuitively, U[*] is the domain of (semantic)
values/paths.  Elements of the set 
<!-- MATH: $C = (U \times U^*)$ -->
<EQN/>
are called contexts and denoted by c. The function <EQN/>
can be thought of
as mapping global contexts onto (partial) functions from local contexts
to values.
The function F is extended to paths, so that for 
<!-- MATH: $P =
\langle a_1\cdots a_n\rangle$ -->
<EQN/>
(<EQN/>)
we write F(P) to denote 
<!-- MATH: $u_1
\cdots u_n \in U^*$ -->
<EQN/>,
where 
<!-- MATH: $u_i = F(a_i)$ -->
ui = F(ai) for each i (
<!-- MATH: $1 \le i \le
n$ -->
<EQN/>).
</P>
<P>
Intuitively, value descriptors denote elements of U[*] (as we
shall see, this will need to be revised later in order to account for
DATR's default mechanism). We associate with the interpretation 
<!-- MATH: $I =
(U, \kappa, F)$ -->
<EQN/>
a partial denotation function 
<!-- MATH: $[\![  ]\!]:\mbox{\sc desc}
\rightarrow (C \rightarrow U^*)$ -->
<EQN/>
and write 
<!-- MATH: $[\![ d ]\!]_c$ -->
<EQN/>
to denote the
meaning (value) of descriptor d in the global context c. The
 denotation function is defined as shown in figure <CREF/>. Note that an atom always denotes the same element of U, regardless of the
context. By contrast, the denotation of an inheritance descriptor is, in
general, sensitive to the global context c in which it appears. Note
also that in the case of a global inheritance descriptor, the global
context is effectively altered to reflect the new local context c'.
The denotation function is extended to sequences of value descriptors in
the obvious way. Thus, for 
<!-- MATH: $\phi = d_1 \cdots d_n$ -->
<EQN/>
(<EQN/>), we write
<!-- MATH: $[\![ \phi ]\!]_c$ -->
<EQN/>
to denote 
<!-- MATH: $v_1 \cdots v_n \in U^*$ -->
<EQN/>
if 
<!-- MATH: $v_i =
[\![ d_i ]\!]_c$ -->
<EQN/>
(
<!-- MATH: $1 \le i \le n$ -->
<EQN/>)
is defined (and 
<!-- MATH: $[\![ \phi ]\!]_c$ -->
<EQN/>
is
undefined otherwise).
</P>
<P>
Now, let 
<!-- MATH: $I = (U, \kappa, F)$ -->
<EQN/>
be an
interpretation and 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
a theory. We will write
<!-- MATH: $[\![ \mbox{$\cal T$ }/N ]\!]_c$ -->
<EQN/>
to denote that partial function from U[*] to
U[*] given by
</P>
<P>
<EQN/>
</P>
<P>
It is easy to verify that 
<!-- MATH: $[\![ \mbox{$\cal T$ }/N ]\!]_c$ -->
<EQN/>
does indeed denote a
partial function (it follows from the functionality of the theory
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>).  Let us also write 
<!-- MATH: $[\![ N ]\!]_c$ -->
<EQN/>
to denote that partial
function from U[*] to U[*] given by 
<!-- MATH: $[\![ N ]\!]_c(v) =
\kappa(c)(F(N),v)$ -->
<EQN/>,
for all <EQN/>.
Then, I models
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
just in case the following containment holds for each node Nand context c:
</P>
<P>
<EQN/>
</P>
<P>
That is, an interpretation is a model of a DATR theory just in case
(for each global context) the function it associates with each node
respects the definition of that node within the theory.
</P>
</DIV>
<DIV ID="4.2" DEPTH="2" R-NO="2"><HEADER>    Implicit Information and Default Models
</HEADER>
<P>
The notion of a model presented in the preceding section is too liberal
in that it takes no account of information implicit in a theory.
For example, consider again the definition of the
node 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
 from the theory of figure <CREF/>, and repeated below.
</P>
<P>
<EQN/>
</P>
<P>
According to the definition of a model given previously, any model of the
 theory of figure <CREF/> will associate with the node 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
a function from paths to values
which respects the above definition. This means that for
every global context c, the following containment must
 hold: 
</P>
<P>
<EQN/>
</P>
<P>
On the other hand, there is no guarantee that a given model will also
respect the following containment:
</P>
<P>
<EQN/>
</P>
<P>
In fact, this containment (amongst other things) should hold.
It follows `by default' from the statements made about 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>that the path 
<!-- MATH: $\langle \mbox{\bf mor} \rangle$ -->
<EQN/>
inherits locally from 
<!-- MATH: $\mbox{\bf Verb}$ -->
<EQN/>
and
that the value associated with any extension of 
<!-- MATH: $\langle \mbox{\bf mor root} \rangle$ -->
<EQN/>is 
<!-- MATH: $\mbox{\bf walk}$ -->
<EQN/>.
</P>
<P>
There have been a number of formal treatments of defaults in
the setting of attribute-value formalisms
 <REF/>,<REF/>,<REF/>,<REF/>. Each of these approaches formalizes a notion of default inheritance by defining appropriate operations
(e.g. default unification) for combining strict and default information.
Strict information is allowed to over-ride default information where the
combination would otherwise lead to inconsistency (i.e. unification
failure). In the case of DATR however, the formalism does not draw an
explicit distinction between strict and default values for paths. In
fact, all of the information given explicitly in a DATR theory is
strict. The non-monotonic nature of DATR theories
arises from a general, default mechanism which
`fills in the gaps' by supplying values for paths not explicitly
specified in a theory.
More specifically,
DATR's default mechanism ensures that any path that is not
explicitly specified for a given node will take its definition from the
longest prefix of that path that is specified. Thus, the default
mechanism defines a class of implicit, definitional sentences with paths
on the left that extend paths found on the left of explicit sentences.
Furthermore, this extension of paths is also carried over to paths
occurring on the right. In effect, each (explicit) path is associated
not just with a single value specification, but with a whole family of
specifications indexed by extensions of those paths.
</P>
<P>
This suggests the following approach to the semantics of defaults in
DATR. Rather than interpreting node definitions (in a given global
context) as partial functions from paths to values (i.e. of type 
<!-- MATH: $U^*
\rightarrow U^*$ -->
<EQN/>)
we choose instead to interpret them as partial
functions from (explicit) paths, to functions from extensions of those
paths to values (i.e. of type 
<!-- MATH: $U^* \rightarrow (U^* \rightarrow
U^*)$ -->
<EQN/>). Now suppose that 
<!-- MATH: $f:U^* \rightarrow (U^* \rightarrow U^*)$ -->
<EQN/>
is
the function associated with the node definition 
<!-- MATH: $\mbox{$\cal T$ }/N$ -->
<EQN/>
in a given
DATR interpretation.  We can define a partial function 
<!-- MATH: $\Delta(f): U^*
\rightarrow U^*$ -->
<EQN/>
(the default interpretation of 
<!-- MATH: $\mbox{$\cal T$ }/N$ -->
<EQN/>)
as
follows.  For each <EQN/>
set
</P>
<P>
<EQN/>
</P>
<P>
where 
<!-- MATH: $v = v_1v_2$ -->
v = v1v2 and v1 is the longest prefix of v such that
f(v1) is defined. In effect, the function <EQN/>
makes explicit
that information about paths and values that is only
implicit in f, but just in
so far as it does not conflict with explicit information provided by
f.
</P>
<P>
In order to re-interpret node definitions in the manner suggested above,
it is necessary to modify the interpretation of value descriptors.
In a given global context c, a value descriptor
d now corresponds to a total function 
<!-- MATH: $[\![ d ]\!]_c:U^* \rightarrow
U^*$ -->
<EQN/>
(intuitively, a function from path extensions to values). For
example, atoms now denote constant functions:
</P>
<P>
<EQN/>
</P>
<P>
More generally, value descriptors will denote different values for
 different paths. Figure <CREF/> shows the revised clause for global node/path pairs, the other definitions being very similar.  Note
the way in which the `path' argument v is used to extend 
<!-- MATH: $v_1 \cdots
v_n$ -->
<EQN/>
in order to define the new local (and in this case also, global)
context c'. On the other hand, the meaning of each of the di is
obtained with respect to the `empty path' <EQN/>
(i.e. path
extension does not apply to subterms of inheritance descriptors).
</P>
<P>
As before, the interpretation function is extended to sequences of path
descriptors, so that for 
<!-- MATH: $\phi = d_1 \cdots d_n$ -->
<EQN/>
(<EQN/>)
we have
<!-- MATH: $[\![ \phi ]\!]_c(v) = v_1 \cdots v_n \in U^*$ -->
<EQN/>,
if 
<!-- MATH: $v_i =
[\![ d_i ]\!](v)$ -->
<EQN/>
is defined, for each i (
<!-- MATH: $1 \le i \le n$ -->
<EQN/>)
(and
<!-- MATH: $[\![ \phi ]\!]_c(v)$ -->
<EQN/>
is undefined otherwise).  The definition of the
interpretation of node definitions can be taken over unchanged from the
previous section.  However, for a theory 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
and node N, the
function 
<!-- MATH: $[\![ \mbox{$\cal T$ }/N ]\!]_c$ -->
<EQN/>
is now of type 
<!-- MATH: $U^* \rightarrow (U^*
\rightarrow U^*)$ -->
<EQN/>.
An interpretation 
<!-- MATH: $I = (U,\kappa,F)$ -->
<EQN/>
is a default model for theory 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
just in case for every context cand node N we have:
</P>
<P>
<EQN/>
</P>
<P>
As an example, consider the default interpretation of the definition of
the node 
<!-- MATH: $\mbox{\bf Walk}$ -->
<EQN/>
given above. By definition, any default model of
 the theory of figure <CREF/> must respect the following containment:
</P>
<P>
<EQN/>
</P>
<P>
From the definition of <EQN/>,
it follows that for any path v, if
v extends 
<!-- MATH: $\langle \mbox{\bf mor root} \rangle$ -->
<EQN/>,
then it is mapped onto the value
<!-- MATH: $\mbox{\bf walk}$ -->
<EQN/>,
and otherwise it is mapped to the value given by
<!-- MATH: $[\![ \mbox{\bf Verb}:\langle  \rangle ]\!]_c(v)$ -->
<EQN/>.
We have the following picture:
</P>
<P>
<EQN/>
</P>
<P>
The default models of a theory 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>
constitute a proper subset of
the models of 
<!-- MATH: $\mbox{$\cal T$ }$ -->
<EQN/>:
just those that respect the default
interpretations of each of the nodes defined within the theory.
</P>
</DIV>
</DIV>
<DIV ID="5" DEPTH="1" R-NO="5"><HEADER>    Conclusions
</HEADER>
<P>
The work described in this paper fulfils one of the objectives of the
DATR programme: to provide the language with an explicit, declarative
semantics. We have presented a formal model of DATR as a language for
defining partial functions and this model has been contrasted with an
informal view of DATR as a language for representing inheritance
hierarchies.  The approach provides a transparent treatment of DATR's
notion of (local and global) context and accounts for DATR's default
mechanism by regarding value descriptors (semantically) as families of
values indexed by paths.
</P>
<P>
The provision of a formal
semantics for DATR is important for several reasons. First, it
provides the DATR user with a concise, implementation-independent
account of the meaning of DATR theories.  Second, it serves as a
standard against which other, operational definitions
of the formalism can be judged.  Indeed, in the absence of such a
standard, it is impossible to demonstrate formally the correctness of
novel implementation strategies (for an example of such a strategy, see
 <REF/>).  Third, the process of formalisation itself aids our understanding of the language and its relationship to other
non-monotonic, attribute-value formalisms.  Finally, the semantics
presented in this paper provides a sound basis for subsequent
investigations into the mathematical and computational properties of
DATR.
</P>
</DIV>
<DIV ID="6" DEPTH="1" R-NO="6"><HEADER>  Acknowledgements </HEADER>
<P>
The author would like to thank Roger Evans, Gerald Gazdar, Bill Rounds
and David Weir for helpful discussions on the work described in this
paper.
</P>
<DIV ID="6.1" DEPTH="2" R-NO="1"><HEADER>Bibliography </HEADER>
<P>
Francois Andry, Norman Fraser, Scott McGlashan, Simon Thornton, and Nick Youd.
1992.
Making DATR work for speech: lexicon compilation in SUNDIAL.
Computational Linguistics, 18(3):245-267.
</P>
<P>
Gosse Bouma.
1992.
Feature structures and nonmonotonicity.
Computational Linguistics, 18(2):183-203.
</P>
<P>
Lynne Cahill and Roger Evans.
1990.
An application of DATR: the TIC lexicon.
In Proceedings of the 9th European Conference on Artificial
  Intelligence, pages 120-125.
</P>
<P>
Lynne Cahill.
1993.
Morphonology in the lexicon.
In Proceedings of the 6th Conference of the European Chapter of
  the Association for Computational Linguistics, pages 87-96.
</P>
<P>
Lynne Cahill.
1994.
An inheritance-based lexicon for message understanding systems.
In Proceedings of the 4th ACL Conference on Applied Natural
  Language Processing, pages 211-212.
</P>
<P>
Bob Carpenter.
1993.
Skeptical and credulous default unification with applications to
  templates and inheritance.
In Ted Briscoe, Valeria de Paiva, and Ann Copestake, editors,   Inheritance, Defaults and the Lexicon, pages 13-37. Cambridge University
  Press, Cambridge.
</P>
<P>
Greville Corbett and Norman Fraser.
1993.
Network morphology: a DATR account of Russian nominal inflection.
Journal of Linguistics, 29:113-142.
</P>
<P>
Roger Evans and Gerald Gazdar.
1989a.
Inference in DATR.
In Proceedings of the 4th Conference of the European Chapter of
  the Association for Computational Linguistics, pages 66-71.
</P>
<P>
Roger Evans and Gerald Gazdar.
1989b.
The semantics of DATR.
In Proceedings of AISB-89, pages 79-87.
</P>
<P>
Roger Evans, Gerald Gazdar, and David Weir.
1994.
Using default inheritance to describe LTAG.
In 3e Colloque International sur les Grammaires d'Arbres
  Adjoints (TAG+3), pages 79-87.
</P>
<P>
Roger Evans, Gerald Gazdar, and David Weir.
1995.
Encoding lexicalized tree adjoining grammars with a nonmonotonic
  inheritance hierarchy.
In Proceedings of the 33rd Annual Meeting of the Association for
  Computational Linguistics.
</P>
<P>
Gerald Gazdar.
1992.
Paradigm function morphology in DATR.
In Lynne Cahill and Richard Coates, editors, Sussex Papers in
  General and Computational Linguistics, number CSRP 239 in Cognitive
  Science Research Papers, pages 45-53. University of Sussex, Brighton.
</P>
<P>
Dafydd Gibbon and Doris Bleiching.
1991.
An ILEX model for German compound stress in DATR.
In Proceedings of the FORWISS-ASL Workshop on Prosody in
  Man-Machine Communication.
</P>
<P>
James Kilbury.
1992.
Pardigm-based derivational morphology.
In Guenther Goerz, editor, Proceedings of KONVENS 92, pages
  159-168. Springer, Berlin.
</P>
<P>
Adam Kilgariff.
1993.
Inheriting verb alternations.
In Proceedings of the 6th Conference of the European Chapter of
  the Association for Computational Linguistics, pages 213-221.
</P>
<P>
Hagen Langer.
1994.
Reverse queries in DATR.
In Proceedings of the 15th International Conference on
  Computational Linguistics, volume II, pages 1089-1095, Kyoto.
</P>
<P>
Graham Russell, Afzal Ballim, John Carroll, and Susan Warwick-Armstrong.
1992.
A practical approach to multiple default inheritance for
  unification-based lexicons.
Computational Linguistics, 18(2):311-337.
</P>
<P>
Mark Young and Bill Rounds.
1993.
A logical semantics for nonmonotonic sorts.
In Proceedings of the 31st Annual Meeting of the Association for
  Computational Linguistics, pages 209-215.
</P>
<DIV ID="6.1.1" DEPTH="3" R-NO="1"><HEADER>Footnotes</HEADER>
<P>
  The syntax presented in
 <REF/>,<REF/> permits nodes and paths to stand as local descriptors.  However, these additional forms can be viewed as
conventional abbreviations, in the appropriate syntactic context, for
node/path pairs
  It is not clear why one would wish to do this anyway, but the
possibility is explicitly left open in the original definitions of
 <REF/>. 
  In this and subsequent examples, syntactic objects
(e.g.
<!-- MATH: $\mbox{\bf walk}$ -->
<EQN/>,
<!-- MATH: $\langle \mbox{\bf mor root} \rangle$ -->
<EQN/>)
are used to stand for their
semantic counterparts under F (i.e. 
<!-- MATH: $F(\mbox{\bf walk})$ -->
<EQN/>,
<!-- MATH: $F(\langle \mbox{\bf mor
root} \rangle)$ -->
<EQN/>,
respectively).
</P>
</DIV>
</DIV>
</DIV>
</BODY>
</MINIMAL-DOC>
