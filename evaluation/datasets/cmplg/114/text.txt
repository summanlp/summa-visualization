
It is well known that Higher-Order Unification (HOU) can be used to
 construct the semantics of Natural Language:  - henceforth, DSP - show that it allows a treatment of VP-Ellipsis
which successfully captures the interaction of VPE with
quantification and nominal anaphora;
 , use HOU to model the interpretation of focus and its interaction with focus sensitive
operators, adverbial quantifiers and second occurrence expressions;
  shows that HOU yields a simple but precise  treatment of corrections; Finally,  uses linear HOU to reconstruct under-specified semantic representations.

However, it is also well known that the HOU approach to NL semantics
systematically over-generates and that some general theory of the
interface between the interpretation process and other sources of
linguistic information is needed in order to avoid this.

In their treatment of VP-ellipsis, DSP introduce an informal
restriction to avoid over-generation: the Primary Occurrence
  Restriction (POR).  Although this restriction is intuitive and
linguistically well-motivated, it does not provide a general
theoretical framework for extra-semantic constraints.

In this paper, we argue that Higher-Order Coloured Unification
 (HOCU, (cf. sections ), a restricted form of HOU developed independently for theorem proving, provides the needed
general framework. We start out by showing that the HOCU approach
allows for a precise and intuitive modeling of DSP's Primary
 Occurrence Restriction (cf. section ). We then show that the POR can be extended to capture linguistic restrictions on other
phenomena (focus, second occurrence expressions and adverbial
quantification) provided that the notion of primary occurrence
 is suitably adjusted (cf. section ). Obviously a treatment of the interplay of these phenomena and their related notion of primary
occurrence is only feasible given a precise and well-understood
theoretical framework. We illustrate this by an example in
 section . Finally, we illustrate the generality of the HOCU framework by using it to encode a completely different constraint,
 namely Kratzer's binding principle (cf. section ). 

The basic idea underlying the use of HOU for NL semantics is very
simple: the typed -calculus is used as a semantic
representation language while semantically under-specified elements
(e.g. anaphors and ellipses) are represented by free variables whose
value is determined by solving higher-order equations. For instance,
the discourse (1a) has (1b) as a semantic representation where the
value of R is given by equation (1c) with solutions (1d) and (1e).



The process of solving such equations is traditionally called
unification and can be stated as follows: given two terms M and N,
find a substitution of terms for free variables that will make M and
N equal. For first order logic, this problem is decidable and the
set of solutions can be represented by a single most general unifier.
For the typed -calculus, the problem is undecidable, but
there is an algorithm which - given a solvable equation - will
enumerate a complete set of solutions for this equation
 . 

Note that in (1), unification yields a linguistically valid solution
(1d) but also an invalid one: (1e). To remedy this shortcoming, DSP
propose an informal restriction, the Primary Occurrence
  Restriction:
Given a labeling of occurrences as either primary or secondary, the
  POR excludes of the set of linguistically valid solutions, any
  solution which contains a primary occurrence.
Here, a primary occurrence is an occurrence that is   directly associated with a source parallel element. Neither
the notion of direct association, nor that of parallelism is given a
formal definition; but given an intuitive understanding of these
notions, a source parallel element is an element of the source
(i.e. antecedent) clause which has a parallel counterpart in the
target (i.e. elliptic or anaphoric) clause.

To see how this works, consider example (1) again. In this case,   dan is taken to be a primary occurrence because it represents a
source parallel element which is neither anaphoric nor controlled
i.e. it is directly associated with a source parallel element.
Given this, equation (1c) becomes (2a) with solutions (2b) and (2c)
(primary occurrences are underlined). Since (2c) contains a primary
occurrence, it is ruled out by the POR and is thus excluded from the
set of linguistically valid solutions.



Although the intuitions underlying the POR are clear, two main
objections can be raised. First, the restriction is informal and as
such provides no good basis for a mathematical and computational
evaluation. As DSP themselves note, a general theory for the POR is
called for. Second, their method is a generate-and-test method: all
logically valid solutions are generated before those solutions that
violate the POR and are linguistically invalid are eliminated.  While
this is sufficient for a theoretical analysis, for actual computation
it would be preferable never to produce these solutions in the first
place. In what follows, we present a unification framework which
solves both of these problems.

There is a restricted form of HOU which allows for a natural modeling
of DSP's Primary Occurrence Restriction: Higher-Order Coloured
Unification developed independently for theorem proving
 . This framework uses a variant of the simply typed -calculus where symbol
occurrences can be annotated with so-called colours and
substitutions must obey the following constraint:
For any colour constant  and any -coloured variable
  ,
a well-formed coloured substitution must assign to
  
a -monochrome term i.e., a term whose symbols are
 -coloured.

Given this coloured framework, the POR is directly modelled as follows:
Primary occurrences are -coloured whilst free variables are
-coloured. For the moment we will just consider the colours

(primary for ellipsis) and 
(secondary for ellipsis)
as distinct basic colours to keep the presentation simple. Only for
the analysis of the interaction of e.g.  ellipsis with focus phenomena
 (cf. section ) do we need a more elaborate formalization, which we will discuss there.

Given the above restriction for well-formed coloured substitutions,
such a colouring ensures that any solution containing a primary
occurrence is ruled out: free variables are -coloured and
must be assigned a -monochrome term. Hence no substitution
will ever contain a primary occurrence (i.e. a -coloured
symbol). For instance, discourse (1a) above is assigned the semantic
representation (3a) and the equation (3b) with unique solution (3c).
In contrast, (3d) is not a possible solution since it assigns to an
-coloured variable, a term containing a -coloured
symbol i.e. a term that is not -monochrome.



To be more formal, we presuppose a finite set


of colour
  constants and a countably infinite supply


of colour variables.

As usual in -calculus, the set 
of well-formed
   formulae consists of (coloured) constants 

,
(possibly uncoloured)
variables 


(function) applications of
the form MN and -abstractions of the form 

.
Note that only variables without colours can be abstracted over.  We
call a formula M -monochrome, if all symbols in M are
bound or tagged with .
We will need the so-called colour erasure |M| of M, i.e. the
formula obtained from M by erasing all colour annotations in M.
We will also use various elementary concepts of the
-calculus, such as free and bound occurrences of
variables or substitutions without defining them explicitly here. In
particular we assume that free variables are coloured in all formulae
occuring. We will denote the substitution of a term N for all free
occurrences of x in M with [N/x]M.

It is crucial for our system that colours annotate symbol occurrences
(i.e.  colours are not sorts!), in particular, it is intended that
different occurrences of symbols carry different colours (e.g.

)
and that symbols that carry different colours
are treated differently.  This observation leads to the notion of
coloured substitutions, that takes the colour information of formulae
into account. In contrast to traditional (uncoloured) substitutions, a
coloured substitution 
is a pair

,
where the term substitution

maps coloured variables (i.e.  the pair 
of a
variable x and the colour c) to formulae of the appropriate type
and the colour substitution 
maps colour variables to
colours. In order to be legal (a -substitution) such a
mapping 
must obey the following constraints:

If 
and 
are different colours, then

,
i.e. the colour erasures have to be equal.

If 


is a colour constant, then 


is
  -monochrome.


The first condition ensures that the colour erasure of a
-substitution is a well-defined classical substitution of the
simply typed -calculus. The second condition formalizes the
fact that free variables with constant colours stand for monochrome
subformulae, whereas colour variables do not constrain the
substitutions. This is exactly the trait, that we will exploit in our
analysis.

Note that -reduction in the coloured -calculus is
just the classical notion, since the bound variables do not carry
colour information.  Thus we have all the known theoretical results,
such as the fact that -reduction always terminates
producing unique normal forms and that -equality can be
tested by reducing to normal form and comparing for syntactic
equality. This gives us a decidable test for validity of an
equation.

In contrast to this, higher-order unification tests for satisfiability by finding a
substitution 
that makes a given equation M=N valid
(

), even if the original equation is not
(

). In the coloured -calculus the space of (semantic) solutions
is further constrained by requiring the solutions to be -substitutions. Such a
substitution is called a -unifier of M and N. In particular,
-unification will only succeed if comparable formulae have unifiable colours.  For
instance, 


unifies with


but not with


because of the colour clash on j.

It is well-known, that in first-order logic (and in certain related
forms of feature structures) there is always a most general unifier
for any equation that is solvable at all.  This is not the case for
higher-order (coloured) unification, where variables can range over
functions, instead of only individuals. Fortunately, in our case we
are not interested in general unification, but we can use the fact
that our formulae belong to very restricted syntactic subclasses, for
which much better results are known. In particular, the fact that free
variables only occur on the left hand side of our equations reduces
the problem of finding solutions to higher-order matching, of which
decidability has been proven for the subclass of third-order
 formulae  and is conjectured for the general case. This class, (intuitively allowing only nesting functions as arguments
up to depth two) covers all of our examples in this paper.  For a
discussion of other subclasses of formulae, where higher-order
 unification is computationally feasible see . 

Some of the equations in the examples have multiple most general
solutions, and indeed this multiplicity corresponds to the possibility
of multiple different interpretations of the focus constructions. The
role of colours in this is to restrict the logically possible
solutions to those that are linguistically sound.

 In section , we have seen that HOCU allowed for a simple theoretical rendering of DSP's Primary Occurrence Restriction. 
But isn't this restriction fairly idiosyncratic? In
this section, we show that the restriction which was originally
proposed by DSP to model VP-ellipsis, is in fact a
very general constraint which far from being idiosyncratic, applies to
many different phenomena. In particular, we show that it is
necessary for an adequate analysis of focus, second occurrence
expressions and adverbial quantification. 

Furthermore, we will see that what counts as a primary occurrence
differs from one phenomenon to the other (for instance, an occurrence
directly associated with focus counts as primary w.r.t focus semantics
but not w.r.t to VP-ellipsis interpretation). To account for these
differences, some machinery is needed which turns DSP's intuitive idea
into a fully-blown theory. Fortunately, the HOCU framework is just
this: different colours can be used for different types of primary
occurrences and likewise for different types of free variables. In
what follows, we show how each phenomenon is dealt with. We then
illustrate by an example how their interaction can be accounted for.

 Since , it is commonly agreed that focus affects the semantics and pragmatics of utterances. Under this
perspective, focus is taken to be the semantic value of a
prosodically prominent element. Furthermore, focus is assumed to
trigger the formation of an additional semantic value (henceforth, the
Focus Semantic Value or FSV) which is in essence the set of
propositions obtained by making a substitution in the focus position
 (cf. e.g. ). For instance, the FSV of  (4a) is (4b), the set of formulae of the form l(j,x) where x is of type e,
and the pragmatic effect of focus is to presuppose that the denotation
of this set is under consideration.



 In , we show that HOU can successfully be used to compute the FSV of an utterance. More specifically, given (part of) an
utterance U with semantic representation Sem and foci 

,
we require that the following equation, the FSV equation,
be solved:



On the basis of the Gd value, we then define the FSV, written
,
as follows:



This yields a focus semantic value which is in
essence Kratzer's presupposition skeleton.
For instance, given (4a) above, the required equation will be


with two possible values for Gd: 


and 

.
Given definition (4.1), (4a)
is then assigned two FSVs namely



That is, the HOU treatment of focus over-generates: (5a) is an
appropriate FSV, but not (5b). Clearly though, the POR can be used to
rule out (5b) if we assume that occurrences that are directly
associated with a focus are primary occurrences. To capture the fact
that those primary occurrences are different from DSP's primary
occurrences when dealing with ellipsis, we colour occurrences that are
directly associated with focus (rather than a source parallel element
in the case of ellipsis) .
Consequently, we require that the
variable representing the FSV be 
coloured, that is, its
value may not contain any 
term. Under these assumptions, the
equation for (4a) will be (6a) which has for unique solution (6b).



A second occurrence expression (SOE) is a partial or complete
repetition of the preceding utterance and is characterised by a
 de-accenting of the repeating part . For instance, (7b) is an SOE whose repeating part only likes Mary is
deaccented.



 In , we show that SOEs are advantageously viewed as involving a deaccented
anaphor whose semantic representation must unify with that of its
antecedent.  Formally, this is captured as follows. Let SSem and
TSem be the semantic representation of the source and target clause
respectively, and 


be the target and
 source parallel elements, then the interpretation of an SOE must respect the following equations: 



Given this proposal and some further assumptions about the semantics
of only, the analysis of (7b) involves the following
equations:



Resolution of the first equation then yields two
solutions:



Since An represents the semantic information shared by target and
source clause, the second solution is clearly incorrect given that it
contains information (j) that is specific to the source clause.
Again, the POR will rule out the incorrect solutions, whereby contrary
to the VP-ellipsis case, all occurrences that are directly associated
with parallel elements (i.e. not just source parallel elements) are
taken to be primary occurrences. The distinction is implemented by
colouring all occurrences that are directly associated with parallel
element ,
whereas the corresponding free variable (An) is
coloured as .
Given these constraints, the first equation in
(8) is reformulated as:

An_(j_) = P [P {x. like(x,y) y _e }
 P(j_) P = x. like(x,m) ] 

with the unique well-coloured solution



Finally, let us briefly examine some cases of adverbial
quantification. Consider the following example from
 :  



 In , we suggest that such cases are SOEs, and thus can be treated as involving a deaccented anaphor (in this
case, the anaphor he always takes Sue to _'s mother). Given
some standard assumptions about the semantics of always, the
equations constraining the interpretation An of this anaphor are:



Consider the first equation. If An is the semantics shared by target
and source clause, then the only possible value for An is 



where both occurrences of the parallel element m have been abstracted
over. In contrast, the following solutions for An are incorrect.



Once again, we see that the POR is a necessary restriction: by
labeling as primary, all occurrences representing a parallel element,
it can be ensured that only the first solution is generated.

Perhaps the most convincing way of showing the need for a theory of
colours (rather than just an informal constraint) is by looking at the
interaction of constraints between various phenomena. Consider the
following discourse 



Such a discourse presents us with a case of interaction between
ellipsis and focus thereby raising the question of how DSP' POR for
ellipsis should interact with our POR for focus.

 As remarked in section , we have to interpret the colour 
as the concept of being not primary for ellipsis, which
includes 
(primary for focus).  In order to make this approach
work formally, we have to extend the supply of colours by allowing
boolean combinations of colour constants. The semantics of these
ground colour formula is that of propositional logic, where

is taken to be equivalent to the disjunction of all other
colour constants.

Consequently we have to generalize the second condition on
-substitutions

For all colour annotations 
of symbols in




in propositional logic. 


Thus 


can be instantiated with any coloured formula
that does not contain the colour .
The HOCU algorithm is
augmented with suitable rules for boolean constraint satisfaction for
colour equations.

The equations resulting from the interpretation of (9b) are:



where the first equation determines the interpretation of the ellipsis
whereas the second fixes the value of the FSV. Resolution of the
first equation yields the value 


for
.
As required, no other solution is possible given the
colour constraints; in particular 

is not a valid solution. The value of 


is now 


 so that the second equation is: 



Under the indicated colour constraints, three solutions are
possible:



The first solution yields a narrow focus reading (only   SARAH is in focus) whereas the second and the third yield   wide focus interpretations corresponding to a VP and an S focus
respectively. That is, not only do colours allow us to correctly
capture the interaction of the two PORs restricting the
interpretation of ellipsis of focus, they also permit a natural
 modeling of focus projection (cf. ).    

An additional argument in favour of a general theory of colours lies
in the fact that constraints that are distinct from the POR need to be
encoded to prevent HOU analyses from over-generating.
In this section, we present one such constraint (the so-called   weak-crossover constraint) and show how it can be implemented
within the HOCU framework. 

In essence, the main function of the POR is to ensure that some
occurrence occuring in an equation appears as a bound variable in the
term assigned by substitution to the free variable occurring in this
equation. However, there are cases where the dual constraint
must be enforced: a term occurrence appearing in an equation must
appear unchanged in the term assigned by substitution to the free
variable occurring in this equation. The following example illustrates
this.

  observes that focused NPs pattern with quantified and wh-NPs with respect to pronominal anaphora: when the
quantified/wh/focused NP precedes and c-commands the pronoun, this
pronoun yields an ambiguity between a co-referential and a
bound-variable reading. This is illustrated in example



where the presence of the pronoun hei gives rise to two possible
 FSVs 



thus allowing two different readings: the
corefential or strict reading 



and the bound-variable or sloppy reading. 



In contrast, if the quantified/wh/focused NP does not precede and
c-command the pronoun, as in



there is no ambiguity and the pronoun can only
give rise to a co-referential interpretation. For instance, given (11)
only one reading arises



where the FSV is 

.

To capture this data, Government and Binding analyses postulate first,
that the antecedent is raised by quantifier raising and second, that
pronouns that are c-commanded and preceded by their antecedent are
represented either as a -bound variable or as a constant
whereas other pronouns can only be represented by a constant (cf. e.g.
 's binding principle).  Using HOCU, we can model this restriction directly. As before, the focus term is - and the FSV variable -coloured. Furthermore, we
assume that pronouns that are preceded and c-commanded by a
quantified/wh/focused antecedent are variable coloured whereas other
pronouns are -coloured. Finally, all other terms are taken to
be -coloured. Given these assumptions, the
representation for (10) is


and the corresponding FSV equation


has two possible solutions



In contrast, the representation for (11) is


and the equation is



with only one well-coloured solution



Importantly, given the indicated colour constraints, no other
solutions are admissible. Intuitively, there are
two reasons for this. First, the definition of coloured substitutions
ensures that the term assigned to 
is -monochrome.
In particular, this forces any occurrences of 
to appear as
a bound variable in the value assigned to 
whereas


can appear either as 
(a colour variable
unifies with any colour constant) or as a bound variable - this in
effect models the sloppy/strict ambiguity. Second, a colour constant
only unifies with itself. This in effect rules out the bound variable
reading in (11): if the 
occurrence were to become
a bound variable, the value of 
would then 


. But then by -reduction, 


would be 


which does
not unify with the right hand side of the original equation i.e

.

For a more formal account of how the unifiers are calculated see
 section .  

Since the HOCU is the principal computational device of the analysis
in this paper, we will now try to give an intuition for the
functioning of the algorithm.  For a formal account including all
 details and proofs see . 

Just as in the case of unification for first-order terms, the
algorithm is a process of recursive decomposition and variable
elimination that transform sets of equations into solved forms. Since
-substitutions have two parts, a term- and a colour part, we
need two kinds (M=[t]N for term equations and c=[c]d for colour
equations). Sets 
of equations in solved form (i.e.  where all
equations are of the form x=M such that the variable x does not
occur anywhere else in M or )
have a unique most general
-unifier 


that also -unifies the initial
equation.

There are several rules that decompose the syntactic structure of
formulae, we will only present two of them.  The rule for abstractions
transforms equations of the form 


to

[c/x]A=[t][c/y]B, and 


to 

[c/x]A=[t]Bc where c is
a new constant, which may not appear in any solution.  The rule for
applications decomposes


to the set

,
provided that h is a
constant.  Furthermore equations are kept in -normal form.

The variable elimination process for colour variables is very simple,
it allows to transform a set 


of
equations to 

,
making the equation 


solved in the result. For
the formula case, elimination is not that simple, since we have to
ensure that 


to obtain a
-substitution .
Thus we cannot simply transform a set


into 

,
since this would (incorrectly) solve the
equations 

.
The correct variable
elimination rule transforms 


into

,
where 
are all colours of the variable x occurring in Mand ,
the M[i] are appropriately coloured variants (same
colour erasure) of M, and 
is the -substitution that
eliminates all occurrences of x from .

Due to the presence of function variables, systematic application of
these rules can
terminate with equations of the form

.
Such equations
can neither be further decomposed, since this would
loose unifiers (if G and F are variables, then Ga=Fb as a
solution 


for F and G, but 


is
unsolvable), nor can the right hand side be substituted for x as in
a variable elimination rule, since the types would clash. Let us
consider the uncoloured equation x(a)=[t]a which has the solutions


and 


for x.

The standard solution for finding a complete set of solutions in this
so-called flex/rigid situation is to substitute a term for xthat will enable decomposition to be applicable afterwards. It turns
out that for finding all -unifiers it is sufficient to bind xto terms of the same type as x (otherwise the unifier would be
ill-typed) and compatible colour (otherwise the unifier would not be a
-substitution) that either

have the same head as the right hand side; the so-called imitation
  solution (


in our example) or

where the head is a bound variable that enables the head of one of the
  arguments of x to become head; the so-called projection binding
  (

).


In order to get a better understanding of the situation let us reconsider our
example using colours. 

.
For the imitation solution 


we ``imitate'' the right hand side, so the colour on 
must be .
For the projection solution we instantiate 


for x and obtain

,
which -reduces to .
We see that this ``lifts''
the constant 
from the argument position to the top. Incidentally, the
projection is only a -unifier of our coloured example, if 
and 
are
identical.

Fortunately, the choice of instantiations can be further restricted to the most general
terms in the categories above.  If 
has type 


and

has type 

,
then these so-called general bindings
have the following form:



where the H[i] are new variables of type 


and the 
are
either distinct colour variables (if 

)
or 


(if

). If h is one of the bound variables 

,
then


is called an imitation binding, and else, (h is a constant or a
free variable), a projection binding.

The general rule for flex/rigid equations transforms


into

,
which in essence only fixes a particular binding for
the head variable .
It turns out (for details and proofs
 see ) that these general bindings suffice to solve all flex/rigid situations, possibly at the cost of creating new
flex/rigid situations after elimination of the variable 
and
decomposition of the changed equations (the elimination of x changes


to 


which
has head h).

To fortify our intuition on calculating higher-order coloured unifiers
let us reconsider examples (10) and (11) with the equations


We will develop the derivation of the solutions for the first
equations (10) and point out the differences for the second (11). As a
first step, the first equation is decomposed to



where c is a new constant.  Since 
is a variable, we are
in a flex/rigid situation and have the possibilities of projection and
imitation. The projection bindings 


and 

for 
would lead us to the equations 


and 

,
which are obviously unsolvable,
since the head constants 
(and c resp.)  and 

 clash.  So we can only bind 
to the imitation binding 

.
Now, we can
directly eliminate the variable ,
since there are no other
variants. The resulting equation



can be decomposed to the equations



Let us first look at the first equation; in this flex/rigid situation,
only the projection binding 


can be applied, since the
imitation binding 


contains the forbidden constant cand the other projection leads to a clash. This solves the equation,
since 


-reduces to c, giving the
trivial equation c=[t] c which can be deleted by the decomposition
rules. 

Similarly, in the second equation, the projection binding


for H[2] solves the equation, while the second
projection clashes and the imitation binding 


is
not -monochrome.  Thus we are left with the third equation,
where both imitation and projection bindings yield legal solutions:

The imitation binding for 


is 

,
and not 

,
as one is tempted to
  believe, since it has to be -monochrome. Thus we are left
  with 

,
which can (uniquely) be solved by
  the colour substitution 

.

If we bind 


to 

,
then we are left
  with 

,
which can (uniquely) be solved by the
  colour substitution 

.


If we collect all instantiations, we arrive at exactly the two possible solutions
for 
 in the original equations, which we had claimed in section : 



Obviously both of them solve the equation and furthermore, none is
more general than the other, since 
cannot be inserted for
the variable x in the second unifier (which would make it more
general than the first), since x is bound.

In the case of (11) the equations corresponding to (17) are

,

and 

.
Given the discussion above,
it is immediate to see that 


has to be instantiated with
the projection binding 

,
H[2] with the imitation
binding 

,
since the projection binding leads to
a colour clash (

)
and finally 


has
to be bound to the projection binding 

,
since the
imitation binding 


is not -monochrome.
Collecting the bindings, we arrive at the unique solution

.

Higher-Order Unification has been shown to be a powerful tool for
constructing the interpretation of NL. In this paper, we have argued
that Higher-Order Coloured Unification allows a
precise specification of the interface between semantic interpretation
and other sources of linguistic information, thus preventing
over-generation. We have substantiated this claim by specifying the
linguistic, extra-semantic constraints regulating the interpretation
of VP-ellipsis, focus, SOEs, adverbial quantification and pronouns
whose antecedent is a focused NP.

Other phenomena for which the HOCU approach seems particularly
promising are phenomena in which the semantic interpretation
process is obviously constrained by the other sources of linguistic
information. In particular, it would be interesting to see whether
coloured unification can appropriately model the complex interaction
of constraints governing the interpretation and acceptability of
gapping on the one hand, and sloppy/strict ambiguity on the other.

Another interesting research direction would be the development and
implementation of a monostratal grammar for anaphors whose
interpretation are determined by coloured unification. Colours are
tags which decorate a semantic representation thereby constraining the
unification process; on the other hand, there are also the reflex of
linguistic, non-semantic (e.g. syntactic or prosodic) information.
A full grammar implementation would make this connection more precise.

The work reported in this paper was funded by the Deutsche
Forschungsgemeinschaft (DFG) in Sonderforschungsbereich SFB-378,
Project C2 (LISA).

Christine Bartels.
1995.
Second occurrence test.
Ms.

Noam Chomsky.
1976.
Conditions on rules in grammar.
Linguistic Analysis, 2(4):303-351.

Mary Dalrymple, Stuart Shieber, and Fernando Pereira.
1991.
Ellipsis and higher-order-unification.
Linguistics and Philosophy, 14:399-452.

Daniel Dougherty.
1993.
Higher-order unification using combinators.
Theoretical Computer Science B, 114(2):273-298.

Gilles Dowek.
1992.
Third order matching is decidable.
In Proc. LICS92, pages 2-10. IEEE Computer Society Press.

Claire Gardent and Michael Kohlhase.
1996.
Focus and higher-order unification.
In Proc. COLING96
forthcoming.

Claire Gardent, Michael Kohlhase, and Noor van Leusen.
1996.
Corrections and higher-order unification.
CLAUS report 77, University of Saarland.

Claire Gardent.
1996.
Anaphores parallles et techniques de rsolution.
Langages.

Grard Huet.
1975.
A unification algorithm for typed -calculus.
Theoretical Computer Science 1, pages 27-57.

Ulrich Hustadt.
1991.
A complete transformation system for polymorphic higher-order
  unification.
Technical Report MPI-I-91-228, MPI Informatik, Saarbrcken, Germany.

Dieter Hutter and Michael Kohlhase.
1995.
A coloured version of the -calculus.
SEKI-Report SR-95-05, Universitt des Saarlandes.

Ray S. Jackendoff.
1972.
Semantic Interpretation in Generative Grammar.
The MIT Press.

Angelika Kratzer.
1991.
The representation of focus.
In Arnim van Stechow and Dieter Wunderlich, editors, Semantik:
  Ein internationales Handbuch der zeitgenoessischen Forschung. Berlin: Walter
  de Gruyter.

Manfred Pinkal.
1995.
Radical underspecification.
In The 10th Amsterdam Colloquium.

Christian Prehofer.
1994.
Decidable higher-order unification problems.
In Alan Bundy, editor, Proc. CADE94, LNAI, pages 635-649, Nancy, France.

Steve G. Pulman.
1995.
Higher-order unification and the interpretation of focus.
Paper submitted for publication.

Kai von Fintel.
1995.
A minimal theory of adverbial quantification.
Unpublished draft Ms. MIT, Cambridge, March.

   Colours are indicated by
  subscripts labeling term occurrences; whenever colours are
  irrelevant, we simply omit them.
  Focus is indicated using upper-case.
  As in DSP, the
  identification of parallel elements is taken as given.
  Note
  that this equation falls out of our formal system in that it is
  untyped and thus cannot be solved by the algorithm described in
   section  (as the solutions will show, we have to allow for FSV   and F to have different types). However, it seems to be a routine
  exercise to augment HOU algorithms that can cope with type variables
   like , with the colour methods    from . 
  We abbreviate 

exp(x,cl(y,blt(i))) to ex(x,y,i)  to increase legibility.
  For (11) we have the same situation. Here the
  corresponding equation is 

.
