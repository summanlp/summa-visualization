<?xml version='1.0'?>
<!DOCTYPE MINIMAL-DOC SYSTEM "mini.dtd">
<MINIMAL-DOC>
<TITLE>Using Higher-Order Logic Programming for Semantic
Interpretation of Coordinate Constructs</TITLE>
<ABSTRACT>
<P>
Many theories of semantic interpretation use <EQN/>-term
</P>
</ABSTRACT>
<BODY>
<DIV ID="1" DEPTH="1" R-NO="1"><HEADER>  Introduction </HEADER>
<P>
Many theories of semantic interpretation use <EQN/>-term
</P>
</DIV>
<DIV ID="2" DEPTH="1" R-NO="2"><HEADER>  CCG </HEADER>
<P>
CCG is a grammatical formalism in which there is a one-to-one correspondence
 between the rules of composition at the level of syntax and logical form. Each word is
(perhaps ambiguously) assigned
a category and LF, and when the syntactical operations assign a new
category to a constituent, the corresponding semantic operations
produce a new LF for that constituent as well.  The CCG rules
</P>
<IMAGE TYPE="TABLE"/>
<IMAGE TYPE="TABLE"/>
<P>
shown in Figure 1 are implemented in the system described in this
 paper.  Each of the three operations have both a forward and backward variant.
</P>
<P>
As an illustration of how the semantic rules can be simulated in first-order
unification, consider the derivation of the constituent harry found,
where harry has the category np with LF harry' and
found is a transitive verb of category
<!-- MATH: ${\tt (s\backslash np)/np}$ -->
<EQN/>
with LF
(5)
<!-- MATH: $\lambda object.\lambda subject.({\tt found'}~subject~object)$ -->
<EQN/>
</P>
<IMAGE TYPE="TABLE"/>
<IMAGE TYPE="TABLE"/>
<P>
In the CCG formalism, the derivation is as follows: harry
gets raised with the ]T rule, and then forward composed by the ]B rule
with found, and the result is a category of type
s/np with
LF 
<!-- MATH: $\lambda x.({\tt found'~harry'}~x)$ -->
<EQN/>.
In section 3 it will be
seen how the use of abstract syntax allows this to be expressed directly.
In first-order unification, it is simulated as shown in
 Figure 2. 
</P>
<P>
The final CCG rule to be considered is the coordination rule that specifies
that only like categories can coordinate:
(6)
X conj X =] X
This is actually a schema for a family of rules, collectively called
``generalized coordination'', since the semantic rule is different
 for each case. For example, if X is a unary function,
then the semantic rule is (7a), and
if the functions have two arguments, then the rule is
 (7b). 
(7a)
<!-- MATH: $\Phi FGH=\lambda x.F(Gx)(Hx)$ -->
<EQN/>(7b)
<!-- MATH: $\Phi^2 FGH=\lambda x.\lambda y.F(Gxy)(Hxy)$ -->
<EQN/>For example, when processing (1a), rule (7a) would be used with:
<ITEMIZE>
<ITEM>
<!-- MATH: $F=\lambda x.\lambda y.({\tt and'}~x~y)$ -->
<EQN/>
</ITEM>
<ITEM>
<!-- MATH: $G=\lambda P.(P~{\tt john'})$ -->
<EQN/>
</ITEM>
<ITEM>
<!-- MATH: $H=\lambda P.(P~{\tt bill'})$ -->
<EQN/>
</ITEM>
</ITEMIZE>
with the result
</P>
<P>
<EQN/>
</P>
<P>
which is <EQN/>-equivalent to (2).
</P>
</DIV>
<DIV ID="3" DEPTH="1" R-NO="3"><HEADER>   <EQN/>PROLOG and Abstract Syntax </HEADER>
<P>
<EQN/>Prolog
</P>
</DIV>
<DIV ID="4" DEPTH="1" R-NO="4"><HEADER>  Implementation of Coordination </HEADER>
<P>
A primary goal of abstract-syntax is to support recursion through
abstractions with bound variables.  This leads to
the interpretation
of a bound variable as a ``scoped constant'' - it acts like a constant
that is not visible from the top of the term, but which becomes visible
 during the descent through the abstraction.  See <REF/> for a discussion of how this may be used for evaluation of functional
programs by ``pushing'' the evaluation through abstractions to reduce
redexes that are not at the top-level.  This technique is also used in
the <EQN/>-reducer briefly mentioned at the end of the previous section,
and a similar technique will be used here to implement coordination by
recursively descending through the two arguments to be coordinated.
</P>
<IMAGE TYPE="TABLE"/>
<IMAGE TYPE="TABLE"/>
<IMAGE TYPE="TABLE"/>
<IMAGE TYPE="TABLE"/>
<P>
Before describing the implementation of coordination, it is
first necessary to mention how CCG categories are
represented in the <EQN/>Prolog
</P>
</DIV>
<DIV ID="5" DEPTH="1" R-NO="5"><HEADER>  Conclusion </HEADER>
<P>
We have shown how higher-order logic programming
can be used to elegantly implement the semantic theory of CCG, including
the previously difficult case of its handling of coordination constructs.
The techniques used here should allow similar advantages for a variety
of such theories.
</P>
<P>
An argument can be made that the approach taken here relies on
a formalism that entails implementation issues that are more difficult
than for the other solutions and inherently not as efficient.
However, the implementation issues, although more complex, are also
well-understood  and it can be expected
that future work will bring further improvements.  For example, it is
a straightforward matter to transform the <EQN/>Prolog
</P>
</DIV>
<DIV ID="6" DEPTH="1" R-NO="6"><HEADER>  Acknowledgments </HEADER>
<P>
This work is supported by ARO grant DAAL03-89-0031,
DARPA grant N00014-90-J-1863, and ARO grant DAAH04-94-G-0426.  I would like
to thank Aravind Joshi, Dale Miller, Jong Park, and Mark Steedman for
valuable discussions and comments on earlier drafts.
</P>
<DIV ID="6.1" DEPTH="2" R-NO="1"><HEADER>Bibliography </HEADER>
<P>
David Dowty.
1988.
Type raising, functional composition, and non-constituent
conjunction.
In Richard T. Oehrle, Emmon Bach, and Deirdre Wheeler, editors,
Categorial Grammars and Natural Language Structures.  Reidel,
Dordrecht, pages 153-198.
</P>
<P>
Gerald Gazdar.
1988.
Applicability of indexed grammars to natural languages.
In U. Reyle and C. Rohrer, editors,
Natural language parsing and linguistic theories.  Reidel,
Dordrecht, pages 69-94.
</P>
<P>
Jerry R. Hobbs and Stuart M. Shieber.
1987.
An algorithm for generating quantifier scopings.
Computational Linguistics, 13:47-63.
</P>
<P>
Einar Jowsey.
1990.
Constraining Montague Grammar for Computational Applications.
PhD thesis, University of Edinburgh.
</P>
<P>
Dale Miller.
1990.
A logic programming language with lambda abstraction, function
variables and simple unification.
In P. Schroeder-Heister, editor, Extensions of Logic
Programming, Lecture Notes in Artifical Intelligence, Springer-Verlag, 1990.
</P>
<P>
Dale Miller.
1991.
Abstract syntax and logic programming.
In Proceedings of the Second Russian Conference on Logic
Programming, September 1991.
</P>
<P>
Dale Miller and Gopalan Nadathur.
1986.
Some uses of higher-order logic in computational linguistics.
In 24th Annual Meeting of the Association for Computational
  Linguistics, pages 247-255.
</P>
<P>
Dale Miller, Gopalan Nadathur, Frank Pfenning, Andre Scedrov.
1991.
Uniform proofs as a foundation for logic programming.
In Annals of Pure and Applied Logic, 51:125-157.
</P>
<P>
Robert C. Moore.
1989.
Unification-based semantic interpretation.
In 27th Annual Meeting of the Association for Computational
  Linguistics, pages 33-41.
</P>
<P>
Remo Pareschi.
1989.
Type-Driven Natural Language Aanalysis.
PhD thesis, University of Edinburgh.
</P>
<P>
Jong C. Park.
1992.
A unification-based semantic interpretation for
coordinate constructs.
In 30th Annual Meeting of the Association for Computational
  Linguistics, pages 209-215.
</P>
<P>
Jong C. Park.
1995.
Quantifier scope and constituency.
In 33rd Annual Meeting of the Association for Computational
  Linguistics (this volume).
</P>
<P>
Barbara Partee and Mats Rooth.
1983.
Generalized conjunction and type ambiguity.
In Rainer Bauerle, Christoph Schwarze, and Arnim von Stechow,
editors,
Meaning, Use, and Interpretation of Language. W. de Gruyter, Berlin,
pages 361-383.
</P>
<P>
Fernando C.N. Pereira.
1990.
Semantic interpretation as higher-order deduction.
In Jan van Eijck, editor, Logics in AI: European Workshop
JELIA'90, Lecture Notes in Artificial Intelligence number 478,
pages 78-96.  Springer-Verlag, Berlin, Germany.
</P>
<P>
Fernando C.N. Pereira and Stuart M. Shieber.
1987.
Prolog and Natural-Language Analysis.
Number 10 in CSLI Lecture Notes.  Center for the Study of Language
and Information, Stanford, California, 1985.  Distributed by the
University of Chicago Press.
</P>
<P>
Frank Pfenning and Conal Elliot.
1988.
Higher-order abstract syntax.
In Proceedings of the ACM-SIGPLAN Conference on Programming
Language Design and Implementation, 1988.
</P>
<P>
Mark J. Steedman.
1990.
Gapping as constituent coordination.
In Linguistics and Philosophy 13, pages 207-263
</P>
<P>
David Weir.
1988.
Characterizing Mildly Context-sensitive Grammar Formalism.
CIS-88-74, PhD thesis, University of Pennsylvania.
</P>
<P>
David Weir and Aravind Joshi.
1988.
Combinatory categorial grammars: generative power and
relation to linear CF rewriting systems.
In 26th Annual Meeting of the Association for Computational
  Linguistics, pages 278-285.
</P>
<DIV ID="6.1.1" DEPTH="3" R-NO="1"><HEADER>Footnotes</HEADER>
<P>
  In the general sense, not
specifically the CCG rule for function composition.
  The type-raising rules shown are actually a simplification
of what has been implemented.  In order to handle determiners, a system
 similar to NP-complement categories as discussed in <REF/> is used. Although a worthwhile further demonstration of the use of abstract syntax, it
has been left out of this paper for space reasons.
  The
<!-- MATH: $\backslash$ -->
<EQN/>
for a backward-looking category should not be confused with the
<!-- MATH: $\backslash$ -->
<EQN/>
for <EQN/>-abstraction.
  example adapted from
 <REF/>, p. 220]. 
  It is not established if this schema should actually
 produce an unbounded family of rules.  See <REF/> and [] for a
discussion of the implications for automata-theoretic
power of generalized coordination
 and composition, and <REF/> for linguistic arguments that languages  like Dutch may require this power, and <REF/> for some further discussion of the issue.  In this paper we use the generalized rule to
illustrate the elegance of the representation, but it is an easy
change to implement a bounded coordination rule.
  The <EQN/>
notation is used because of the combinatory logic
 background of CCG.  See <REF/> for details. 
</P>
</DIV>
</DIV>
</DIV>
</BODY>
</MINIMAL-DOC>
